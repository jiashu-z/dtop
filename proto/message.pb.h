// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_message_2eproto_metadata_getter(int index);
class DoubleArrayMessage;
struct DoubleArrayMessageDefaultTypeInternal;
extern DoubleArrayMessageDefaultTypeInternal _DoubleArrayMessage_default_instance_;
class DoubleMessage;
struct DoubleMessageDefaultTypeInternal;
extern DoubleMessageDefaultTypeInternal _DoubleMessage_default_instance_;
class FloatArrayMessage;
struct FloatArrayMessageDefaultTypeInternal;
extern FloatArrayMessageDefaultTypeInternal _FloatArrayMessage_default_instance_;
class FloatMessage;
struct FloatMessageDefaultTypeInternal;
extern FloatMessageDefaultTypeInternal _FloatMessage_default_instance_;
class IntegerArrayMessage;
struct IntegerArrayMessageDefaultTypeInternal;
extern IntegerArrayMessageDefaultTypeInternal _IntegerArrayMessage_default_instance_;
class IntegerMessage;
struct IntegerMessageDefaultTypeInternal;
extern IntegerMessageDefaultTypeInternal _IntegerMessage_default_instance_;
class LongArrayMessage;
struct LongArrayMessageDefaultTypeInternal;
extern LongArrayMessageDefaultTypeInternal _LongArrayMessage_default_instance_;
class LongMessage;
struct LongMessageDefaultTypeInternal;
extern LongMessageDefaultTypeInternal _LongMessage_default_instance_;
class StringArrayMessage;
struct StringArrayMessageDefaultTypeInternal;
extern StringArrayMessageDefaultTypeInternal _StringArrayMessage_default_instance_;
class StringMessage;
struct StringMessageDefaultTypeInternal;
extern StringMessageDefaultTypeInternal _StringMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DoubleArrayMessage* Arena::CreateMaybeMessage<::DoubleArrayMessage>(Arena*);
template<> ::DoubleMessage* Arena::CreateMaybeMessage<::DoubleMessage>(Arena*);
template<> ::FloatArrayMessage* Arena::CreateMaybeMessage<::FloatArrayMessage>(Arena*);
template<> ::FloatMessage* Arena::CreateMaybeMessage<::FloatMessage>(Arena*);
template<> ::IntegerArrayMessage* Arena::CreateMaybeMessage<::IntegerArrayMessage>(Arena*);
template<> ::IntegerMessage* Arena::CreateMaybeMessage<::IntegerMessage>(Arena*);
template<> ::LongArrayMessage* Arena::CreateMaybeMessage<::LongArrayMessage>(Arena*);
template<> ::LongMessage* Arena::CreateMaybeMessage<::LongMessage>(Arena*);
template<> ::StringArrayMessage* Arena::CreateMaybeMessage<::StringArrayMessage>(Arena*);
template<> ::StringMessage* Arena::CreateMaybeMessage<::StringMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class StringMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StringMessage) */ {
 public:
  inline StringMessage() : StringMessage(nullptr) {}
  virtual ~StringMessage();
  explicit constexpr StringMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringMessage(const StringMessage& from);
  StringMessage(StringMessage&& from) noexcept
    : StringMessage() {
    *this = ::std::move(from);
  }

  inline StringMessage& operator=(const StringMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringMessage& operator=(StringMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringMessage* internal_default_instance() {
    return reinterpret_cast<const StringMessage*>(
               &_StringMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StringMessage& a, StringMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StringMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringMessage* New() const final {
    return CreateMaybeMessage<StringMessage>(nullptr);
  }

  StringMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringMessage& from);
  void MergeFrom(const StringMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StringMessage";
  }
  protected:
  explicit StringMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // string val = 1;
  void clear_val();
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // @@protoc_insertion_point(class_scope:StringMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class IntegerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IntegerMessage) */ {
 public:
  inline IntegerMessage() : IntegerMessage(nullptr) {}
  virtual ~IntegerMessage();
  explicit constexpr IntegerMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntegerMessage(const IntegerMessage& from);
  IntegerMessage(IntegerMessage&& from) noexcept
    : IntegerMessage() {
    *this = ::std::move(from);
  }

  inline IntegerMessage& operator=(const IntegerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegerMessage& operator=(IntegerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntegerMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntegerMessage* internal_default_instance() {
    return reinterpret_cast<const IntegerMessage*>(
               &_IntegerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IntegerMessage& a, IntegerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntegerMessage* New() const final {
    return CreateMaybeMessage<IntegerMessage>(nullptr);
  }

  IntegerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntegerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntegerMessage& from);
  void MergeFrom(const IntegerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IntegerMessage";
  }
  protected:
  explicit IntegerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // int32 val = 1;
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IntegerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LongMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LongMessage) */ {
 public:
  inline LongMessage() : LongMessage(nullptr) {}
  virtual ~LongMessage();
  explicit constexpr LongMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LongMessage(const LongMessage& from);
  LongMessage(LongMessage&& from) noexcept
    : LongMessage() {
    *this = ::std::move(from);
  }

  inline LongMessage& operator=(const LongMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongMessage& operator=(LongMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LongMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LongMessage* internal_default_instance() {
    return reinterpret_cast<const LongMessage*>(
               &_LongMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LongMessage& a, LongMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LongMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LongMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LongMessage* New() const final {
    return CreateMaybeMessage<LongMessage>(nullptr);
  }

  LongMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LongMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LongMessage& from);
  void MergeFrom(const LongMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LongMessage";
  }
  protected:
  explicit LongMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // int64 val = 1;
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::int64 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:LongMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FloatMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FloatMessage) */ {
 public:
  inline FloatMessage() : FloatMessage(nullptr) {}
  virtual ~FloatMessage();
  explicit constexpr FloatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatMessage(const FloatMessage& from);
  FloatMessage(FloatMessage&& from) noexcept
    : FloatMessage() {
    *this = ::std::move(from);
  }

  inline FloatMessage& operator=(const FloatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatMessage& operator=(FloatMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatMessage* internal_default_instance() {
    return reinterpret_cast<const FloatMessage*>(
               &_FloatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FloatMessage& a, FloatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatMessage* New() const final {
    return CreateMaybeMessage<FloatMessage>(nullptr);
  }

  FloatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatMessage& from);
  void MergeFrom(const FloatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FloatMessage";
  }
  protected:
  explicit FloatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // float val = 1;
  void clear_val();
  float val() const;
  void set_val(float value);
  private:
  float _internal_val() const;
  void _internal_set_val(float value);
  public:

  // @@protoc_insertion_point(class_scope:FloatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DoubleMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DoubleMessage) */ {
 public:
  inline DoubleMessage() : DoubleMessage(nullptr) {}
  virtual ~DoubleMessage();
  explicit constexpr DoubleMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleMessage(const DoubleMessage& from);
  DoubleMessage(DoubleMessage&& from) noexcept
    : DoubleMessage() {
    *this = ::std::move(from);
  }

  inline DoubleMessage& operator=(const DoubleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleMessage& operator=(DoubleMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleMessage* internal_default_instance() {
    return reinterpret_cast<const DoubleMessage*>(
               &_DoubleMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DoubleMessage& a, DoubleMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleMessage* New() const final {
    return CreateMaybeMessage<DoubleMessage>(nullptr);
  }

  DoubleMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleMessage& from);
  void MergeFrom(const DoubleMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DoubleMessage";
  }
  protected:
  explicit DoubleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // double val = 1;
  void clear_val();
  double val() const;
  void set_val(double value);
  private:
  double _internal_val() const;
  void _internal_set_val(double value);
  public:

  // @@protoc_insertion_point(class_scope:DoubleMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class StringArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StringArrayMessage) */ {
 public:
  inline StringArrayMessage() : StringArrayMessage(nullptr) {}
  virtual ~StringArrayMessage();
  explicit constexpr StringArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringArrayMessage(const StringArrayMessage& from);
  StringArrayMessage(StringArrayMessage&& from) noexcept
    : StringArrayMessage() {
    *this = ::std::move(from);
  }

  inline StringArrayMessage& operator=(const StringArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringArrayMessage& operator=(StringArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringArrayMessage* internal_default_instance() {
    return reinterpret_cast<const StringArrayMessage*>(
               &_StringArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StringArrayMessage& a, StringArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StringArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringArrayMessage* New() const final {
    return CreateMaybeMessage<StringArrayMessage>(nullptr);
  }

  StringArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringArrayMessage& from);
  void MergeFrom(const StringArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StringArrayMessage";
  }
  protected:
  explicit StringArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated string arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  const std::string& arr(int index) const;
  std::string* mutable_arr(int index);
  void set_arr(int index, const std::string& value);
  void set_arr(int index, std::string&& value);
  void set_arr(int index, const char* value);
  void set_arr(int index, const char* value, size_t size);
  std::string* add_arr();
  void add_arr(const std::string& value);
  void add_arr(std::string&& value);
  void add_arr(const char* value);
  void add_arr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_arr();
  private:
  const std::string& _internal_arr(int index) const;
  std::string* _internal_add_arr();
  public:

  // @@protoc_insertion_point(class_scope:StringArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class IntegerArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IntegerArrayMessage) */ {
 public:
  inline IntegerArrayMessage() : IntegerArrayMessage(nullptr) {}
  virtual ~IntegerArrayMessage();
  explicit constexpr IntegerArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntegerArrayMessage(const IntegerArrayMessage& from);
  IntegerArrayMessage(IntegerArrayMessage&& from) noexcept
    : IntegerArrayMessage() {
    *this = ::std::move(from);
  }

  inline IntegerArrayMessage& operator=(const IntegerArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegerArrayMessage& operator=(IntegerArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntegerArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntegerArrayMessage* internal_default_instance() {
    return reinterpret_cast<const IntegerArrayMessage*>(
               &_IntegerArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IntegerArrayMessage& a, IntegerArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegerArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegerArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntegerArrayMessage* New() const final {
    return CreateMaybeMessage<IntegerArrayMessage>(nullptr);
  }

  IntegerArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntegerArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntegerArrayMessage& from);
  void MergeFrom(const IntegerArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegerArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IntegerArrayMessage";
  }
  protected:
  explicit IntegerArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated int32 arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_arr() const;
  void _internal_add_arr(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_arr();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 arr(int index) const;
  void set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_arr(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_arr();

  // @@protoc_insertion_point(class_scope:IntegerArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > arr_;
  mutable std::atomic<int> _arr_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LongArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LongArrayMessage) */ {
 public:
  inline LongArrayMessage() : LongArrayMessage(nullptr) {}
  virtual ~LongArrayMessage();
  explicit constexpr LongArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LongArrayMessage(const LongArrayMessage& from);
  LongArrayMessage(LongArrayMessage&& from) noexcept
    : LongArrayMessage() {
    *this = ::std::move(from);
  }

  inline LongArrayMessage& operator=(const LongArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongArrayMessage& operator=(LongArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LongArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LongArrayMessage* internal_default_instance() {
    return reinterpret_cast<const LongArrayMessage*>(
               &_LongArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LongArrayMessage& a, LongArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LongArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LongArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LongArrayMessage* New() const final {
    return CreateMaybeMessage<LongArrayMessage>(nullptr);
  }

  LongArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LongArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LongArrayMessage& from);
  void MergeFrom(const LongArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LongArrayMessage";
  }
  protected:
  explicit LongArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated int64 arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_arr() const;
  void _internal_add_arr(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_arr();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 arr(int index) const;
  void set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_arr(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_arr();

  // @@protoc_insertion_point(class_scope:LongArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > arr_;
  mutable std::atomic<int> _arr_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FloatArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FloatArrayMessage) */ {
 public:
  inline FloatArrayMessage() : FloatArrayMessage(nullptr) {}
  virtual ~FloatArrayMessage();
  explicit constexpr FloatArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatArrayMessage(const FloatArrayMessage& from);
  FloatArrayMessage(FloatArrayMessage&& from) noexcept
    : FloatArrayMessage() {
    *this = ::std::move(from);
  }

  inline FloatArrayMessage& operator=(const FloatArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatArrayMessage& operator=(FloatArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatArrayMessage* internal_default_instance() {
    return reinterpret_cast<const FloatArrayMessage*>(
               &_FloatArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FloatArrayMessage& a, FloatArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatArrayMessage* New() const final {
    return CreateMaybeMessage<FloatArrayMessage>(nullptr);
  }

  FloatArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatArrayMessage& from);
  void MergeFrom(const FloatArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FloatArrayMessage";
  }
  protected:
  explicit FloatArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated float arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  float _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arr() const;
  void _internal_add_arr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arr();
  public:
  float arr(int index) const;
  void set_arr(int index, float value);
  void add_arr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arr();

  // @@protoc_insertion_point(class_scope:FloatArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arr_;
  mutable std::atomic<int> _arr_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DoubleArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DoubleArrayMessage) */ {
 public:
  inline DoubleArrayMessage() : DoubleArrayMessage(nullptr) {}
  virtual ~DoubleArrayMessage();
  explicit constexpr DoubleArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleArrayMessage(const DoubleArrayMessage& from);
  DoubleArrayMessage(DoubleArrayMessage&& from) noexcept
    : DoubleArrayMessage() {
    *this = ::std::move(from);
  }

  inline DoubleArrayMessage& operator=(const DoubleArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleArrayMessage& operator=(DoubleArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleArrayMessage* internal_default_instance() {
    return reinterpret_cast<const DoubleArrayMessage*>(
               &_DoubleArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DoubleArrayMessage& a, DoubleArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleArrayMessage* New() const final {
    return CreateMaybeMessage<DoubleArrayMessage>(nullptr);
  }

  DoubleArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleArrayMessage& from);
  void MergeFrom(const DoubleArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DoubleArrayMessage";
  }
  protected:
  explicit DoubleArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated double arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  double _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_arr() const;
  void _internal_add_arr(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_arr();
  public:
  double arr(int index) const;
  void set_arr(int index, double value);
  void add_arr(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_arr();

  // @@protoc_insertion_point(class_scope:DoubleArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > arr_;
  mutable std::atomic<int> _arr_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringMessage

// string val = 1;
inline void StringMessage::clear_val() {
  val_.ClearToEmpty();
}
inline const std::string& StringMessage::val() const {
  // @@protoc_insertion_point(field_get:StringMessage.val)
  return _internal_val();
}
inline void StringMessage::set_val(const std::string& value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:StringMessage.val)
}
inline std::string* StringMessage::mutable_val() {
  // @@protoc_insertion_point(field_mutable:StringMessage.val)
  return _internal_mutable_val();
}
inline const std::string& StringMessage::_internal_val() const {
  return val_.Get();
}
inline void StringMessage::_internal_set_val(const std::string& value) {
  
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StringMessage::set_val(std::string&& value) {
  
  val_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StringMessage.val)
}
inline void StringMessage::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:StringMessage.val)
}
inline void StringMessage::set_val(const char* value,
    size_t size) {
  
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StringMessage.val)
}
inline std::string* StringMessage::_internal_mutable_val() {
  
  return val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StringMessage::release_val() {
  // @@protoc_insertion_point(field_release:StringMessage.val)
  return val_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringMessage::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StringMessage.val)
}

// -------------------------------------------------------------------

// IntegerMessage

// int32 val = 1;
inline void IntegerMessage::clear_val() {
  val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegerMessage::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegerMessage::val() const {
  // @@protoc_insertion_point(field_get:IntegerMessage.val)
  return _internal_val();
}
inline void IntegerMessage::_internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  val_ = value;
}
inline void IntegerMessage::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:IntegerMessage.val)
}

// -------------------------------------------------------------------

// LongMessage

// int64 val = 1;
inline void LongMessage::clear_val() {
  val_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LongMessage::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LongMessage::val() const {
  // @@protoc_insertion_point(field_get:LongMessage.val)
  return _internal_val();
}
inline void LongMessage::_internal_set_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  val_ = value;
}
inline void LongMessage::set_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:LongMessage.val)
}

// -------------------------------------------------------------------

// FloatMessage

// float val = 1;
inline void FloatMessage::clear_val() {
  val_ = 0;
}
inline float FloatMessage::_internal_val() const {
  return val_;
}
inline float FloatMessage::val() const {
  // @@protoc_insertion_point(field_get:FloatMessage.val)
  return _internal_val();
}
inline void FloatMessage::_internal_set_val(float value) {
  
  val_ = value;
}
inline void FloatMessage::set_val(float value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:FloatMessage.val)
}

// -------------------------------------------------------------------

// DoubleMessage

// double val = 1;
inline void DoubleMessage::clear_val() {
  val_ = 0;
}
inline double DoubleMessage::_internal_val() const {
  return val_;
}
inline double DoubleMessage::val() const {
  // @@protoc_insertion_point(field_get:DoubleMessage.val)
  return _internal_val();
}
inline void DoubleMessage::_internal_set_val(double value) {
  
  val_ = value;
}
inline void DoubleMessage::set_val(double value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:DoubleMessage.val)
}

// -------------------------------------------------------------------

// StringArrayMessage

// repeated string arr = 1;
inline int StringArrayMessage::_internal_arr_size() const {
  return arr_.size();
}
inline int StringArrayMessage::arr_size() const {
  return _internal_arr_size();
}
inline void StringArrayMessage::clear_arr() {
  arr_.Clear();
}
inline std::string* StringArrayMessage::add_arr() {
  // @@protoc_insertion_point(field_add_mutable:StringArrayMessage.arr)
  return _internal_add_arr();
}
inline const std::string& StringArrayMessage::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline const std::string& StringArrayMessage::arr(int index) const {
  // @@protoc_insertion_point(field_get:StringArrayMessage.arr)
  return _internal_arr(index);
}
inline std::string* StringArrayMessage::mutable_arr(int index) {
  // @@protoc_insertion_point(field_mutable:StringArrayMessage.arr)
  return arr_.Mutable(index);
}
inline void StringArrayMessage::set_arr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:StringArrayMessage.arr)
  arr_.Mutable(index)->assign(value);
}
inline void StringArrayMessage::set_arr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:StringArrayMessage.arr)
  arr_.Mutable(index)->assign(std::move(value));
}
inline void StringArrayMessage::set_arr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StringArrayMessage.arr)
}
inline void StringArrayMessage::set_arr(int index, const char* value, size_t size) {
  arr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StringArrayMessage.arr)
}
inline std::string* StringArrayMessage::_internal_add_arr() {
  return arr_.Add();
}
inline void StringArrayMessage::add_arr(const std::string& value) {
  arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StringArrayMessage.arr)
}
inline void StringArrayMessage::add_arr(std::string&& value) {
  arr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StringArrayMessage.arr)
}
inline void StringArrayMessage::add_arr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StringArrayMessage.arr)
}
inline void StringArrayMessage::add_arr(const char* value, size_t size) {
  arr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StringArrayMessage.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringArrayMessage::arr() const {
  // @@protoc_insertion_point(field_list:StringArrayMessage.arr)
  return arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringArrayMessage::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:StringArrayMessage.arr)
  return &arr_;
}

// -------------------------------------------------------------------

// IntegerArrayMessage

// repeated int32 arr = 1;
inline int IntegerArrayMessage::_internal_arr_size() const {
  return arr_.size();
}
inline int IntegerArrayMessage::arr_size() const {
  return _internal_arr_size();
}
inline void IntegerArrayMessage::clear_arr() {
  arr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegerArrayMessage::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegerArrayMessage::arr(int index) const {
  // @@protoc_insertion_point(field_get:IntegerArrayMessage.arr)
  return _internal_arr(index);
}
inline void IntegerArrayMessage::set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:IntegerArrayMessage.arr)
}
inline void IntegerArrayMessage::_internal_add_arr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  arr_.Add(value);
}
inline void IntegerArrayMessage::add_arr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:IntegerArrayMessage.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntegerArrayMessage::_internal_arr() const {
  return arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntegerArrayMessage::arr() const {
  // @@protoc_insertion_point(field_list:IntegerArrayMessage.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntegerArrayMessage::_internal_mutable_arr() {
  return &arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntegerArrayMessage::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:IntegerArrayMessage.arr)
  return _internal_mutable_arr();
}

// -------------------------------------------------------------------

// LongArrayMessage

// repeated int64 arr = 1;
inline int LongArrayMessage::_internal_arr_size() const {
  return arr_.size();
}
inline int LongArrayMessage::arr_size() const {
  return _internal_arr_size();
}
inline void LongArrayMessage::clear_arr() {
  arr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LongArrayMessage::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LongArrayMessage::arr(int index) const {
  // @@protoc_insertion_point(field_get:LongArrayMessage.arr)
  return _internal_arr(index);
}
inline void LongArrayMessage::set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:LongArrayMessage.arr)
}
inline void LongArrayMessage::_internal_add_arr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  arr_.Add(value);
}
inline void LongArrayMessage::add_arr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:LongArrayMessage.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LongArrayMessage::_internal_arr() const {
  return arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LongArrayMessage::arr() const {
  // @@protoc_insertion_point(field_list:LongArrayMessage.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LongArrayMessage::_internal_mutable_arr() {
  return &arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LongArrayMessage::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:LongArrayMessage.arr)
  return _internal_mutable_arr();
}

// -------------------------------------------------------------------

// FloatArrayMessage

// repeated float arr = 1;
inline int FloatArrayMessage::_internal_arr_size() const {
  return arr_.size();
}
inline int FloatArrayMessage::arr_size() const {
  return _internal_arr_size();
}
inline void FloatArrayMessage::clear_arr() {
  arr_.Clear();
}
inline float FloatArrayMessage::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline float FloatArrayMessage::arr(int index) const {
  // @@protoc_insertion_point(field_get:FloatArrayMessage.arr)
  return _internal_arr(index);
}
inline void FloatArrayMessage::set_arr(int index, float value) {
  arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:FloatArrayMessage.arr)
}
inline void FloatArrayMessage::_internal_add_arr(float value) {
  arr_.Add(value);
}
inline void FloatArrayMessage::add_arr(float value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:FloatArrayMessage.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArrayMessage::_internal_arr() const {
  return arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArrayMessage::arr() const {
  // @@protoc_insertion_point(field_list:FloatArrayMessage.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArrayMessage::_internal_mutable_arr() {
  return &arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArrayMessage::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:FloatArrayMessage.arr)
  return _internal_mutable_arr();
}

// -------------------------------------------------------------------

// DoubleArrayMessage

// repeated double arr = 1;
inline int DoubleArrayMessage::_internal_arr_size() const {
  return arr_.size();
}
inline int DoubleArrayMessage::arr_size() const {
  return _internal_arr_size();
}
inline void DoubleArrayMessage::clear_arr() {
  arr_.Clear();
}
inline double DoubleArrayMessage::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline double DoubleArrayMessage::arr(int index) const {
  // @@protoc_insertion_point(field_get:DoubleArrayMessage.arr)
  return _internal_arr(index);
}
inline void DoubleArrayMessage::set_arr(int index, double value) {
  arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:DoubleArrayMessage.arr)
}
inline void DoubleArrayMessage::_internal_add_arr(double value) {
  arr_.Add(value);
}
inline void DoubleArrayMessage::add_arr(double value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:DoubleArrayMessage.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleArrayMessage::_internal_arr() const {
  return arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleArrayMessage::arr() const {
  // @@protoc_insertion_point(field_list:DoubleArrayMessage.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleArrayMessage::_internal_mutable_arr() {
  return &arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleArrayMessage::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:DoubleArrayMessage.arr)
  return _internal_mutable_arr();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
