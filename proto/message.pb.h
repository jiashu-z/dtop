// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_message_2eproto_metadata_getter(int index);
class CommandArrayMessage;
struct CommandArrayMessageDefaultTypeInternal;
extern CommandArrayMessageDefaultTypeInternal _CommandArrayMessage_default_instance_;
class CommandMessage;
struct CommandMessageDefaultTypeInternal;
extern CommandMessageDefaultTypeInternal _CommandMessage_default_instance_;
class CpuMessage;
struct CpuMessageDefaultTypeInternal;
extern CpuMessageDefaultTypeInternal _CpuMessage_default_instance_;
class DoubleArrayMessage;
struct DoubleArrayMessageDefaultTypeInternal;
extern DoubleArrayMessageDefaultTypeInternal _DoubleArrayMessage_default_instance_;
class DoubleMessage;
struct DoubleMessageDefaultTypeInternal;
extern DoubleMessageDefaultTypeInternal _DoubleMessage_default_instance_;
class FetchReplyArrayMessage;
struct FetchReplyArrayMessageDefaultTypeInternal;
extern FetchReplyArrayMessageDefaultTypeInternal _FetchReplyArrayMessage_default_instance_;
class FetchReplyMessage;
struct FetchReplyMessageDefaultTypeInternal;
extern FetchReplyMessageDefaultTypeInternal _FetchReplyMessage_default_instance_;
class FetchRequestArrayMessage;
struct FetchRequestArrayMessageDefaultTypeInternal;
extern FetchRequestArrayMessageDefaultTypeInternal _FetchRequestArrayMessage_default_instance_;
class FetchRequestMessage;
struct FetchRequestMessageDefaultTypeInternal;
extern FetchRequestMessageDefaultTypeInternal _FetchRequestMessage_default_instance_;
class FloatArrayMessage;
struct FloatArrayMessageDefaultTypeInternal;
extern FloatArrayMessageDefaultTypeInternal _FloatArrayMessage_default_instance_;
class FloatMessage;
struct FloatMessageDefaultTypeInternal;
extern FloatMessageDefaultTypeInternal _FloatMessage_default_instance_;
class IntegerArrayMessage;
struct IntegerArrayMessageDefaultTypeInternal;
extern IntegerArrayMessageDefaultTypeInternal _IntegerArrayMessage_default_instance_;
class IntegerMessage;
struct IntegerMessageDefaultTypeInternal;
extern IntegerMessageDefaultTypeInternal _IntegerMessage_default_instance_;
class LongArrayMessage;
struct LongArrayMessageDefaultTypeInternal;
extern LongArrayMessageDefaultTypeInternal _LongArrayMessage_default_instance_;
class LongMessage;
struct LongMessageDefaultTypeInternal;
extern LongMessageDefaultTypeInternal _LongMessage_default_instance_;
class MallocEntryMessage;
struct MallocEntryMessageDefaultTypeInternal;
extern MallocEntryMessageDefaultTypeInternal _MallocEntryMessage_default_instance_;
class MemLeakMessage;
struct MemLeakMessageDefaultTypeInternal;
extern MemLeakMessageDefaultTypeInternal _MemLeakMessage_default_instance_;
class MemUsageMessage;
struct MemUsageMessageDefaultTypeInternal;
extern MemUsageMessageDefaultTypeInternal _MemUsageMessage_default_instance_;
class MemoryMonitorMessage;
struct MemoryMonitorMessageDefaultTypeInternal;
extern MemoryMonitorMessageDefaultTypeInternal _MemoryMonitorMessage_default_instance_;
class ProcessMessage;
struct ProcessMessageDefaultTypeInternal;
extern ProcessMessageDefaultTypeInternal _ProcessMessage_default_instance_;
class ServerStatusArrayMessage;
struct ServerStatusArrayMessageDefaultTypeInternal;
extern ServerStatusArrayMessageDefaultTypeInternal _ServerStatusArrayMessage_default_instance_;
class ServerStatusMessage;
struct ServerStatusMessageDefaultTypeInternal;
extern ServerStatusMessageDefaultTypeInternal _ServerStatusMessage_default_instance_;
class StringArrayMessage;
struct StringArrayMessageDefaultTypeInternal;
extern StringArrayMessageDefaultTypeInternal _StringArrayMessage_default_instance_;
class StringMessage;
struct StringMessageDefaultTypeInternal;
extern StringMessageDefaultTypeInternal _StringMessage_default_instance_;
class ThreadMessage;
struct ThreadMessageDefaultTypeInternal;
extern ThreadMessageDefaultTypeInternal _ThreadMessage_default_instance_;
class WorkerFutureMessage;
struct WorkerFutureMessageDefaultTypeInternal;
extern WorkerFutureMessageDefaultTypeInternal _WorkerFutureMessage_default_instance_;
class WorkerStatusMessage;
struct WorkerStatusMessageDefaultTypeInternal;
extern WorkerStatusMessageDefaultTypeInternal _WorkerStatusMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CommandArrayMessage* Arena::CreateMaybeMessage<::CommandArrayMessage>(Arena*);
template<> ::CommandMessage* Arena::CreateMaybeMessage<::CommandMessage>(Arena*);
template<> ::CpuMessage* Arena::CreateMaybeMessage<::CpuMessage>(Arena*);
template<> ::DoubleArrayMessage* Arena::CreateMaybeMessage<::DoubleArrayMessage>(Arena*);
template<> ::DoubleMessage* Arena::CreateMaybeMessage<::DoubleMessage>(Arena*);
template<> ::FetchReplyArrayMessage* Arena::CreateMaybeMessage<::FetchReplyArrayMessage>(Arena*);
template<> ::FetchReplyMessage* Arena::CreateMaybeMessage<::FetchReplyMessage>(Arena*);
template<> ::FetchRequestArrayMessage* Arena::CreateMaybeMessage<::FetchRequestArrayMessage>(Arena*);
template<> ::FetchRequestMessage* Arena::CreateMaybeMessage<::FetchRequestMessage>(Arena*);
template<> ::FloatArrayMessage* Arena::CreateMaybeMessage<::FloatArrayMessage>(Arena*);
template<> ::FloatMessage* Arena::CreateMaybeMessage<::FloatMessage>(Arena*);
template<> ::IntegerArrayMessage* Arena::CreateMaybeMessage<::IntegerArrayMessage>(Arena*);
template<> ::IntegerMessage* Arena::CreateMaybeMessage<::IntegerMessage>(Arena*);
template<> ::LongArrayMessage* Arena::CreateMaybeMessage<::LongArrayMessage>(Arena*);
template<> ::LongMessage* Arena::CreateMaybeMessage<::LongMessage>(Arena*);
template<> ::MallocEntryMessage* Arena::CreateMaybeMessage<::MallocEntryMessage>(Arena*);
template<> ::MemLeakMessage* Arena::CreateMaybeMessage<::MemLeakMessage>(Arena*);
template<> ::MemUsageMessage* Arena::CreateMaybeMessage<::MemUsageMessage>(Arena*);
template<> ::MemoryMonitorMessage* Arena::CreateMaybeMessage<::MemoryMonitorMessage>(Arena*);
template<> ::ProcessMessage* Arena::CreateMaybeMessage<::ProcessMessage>(Arena*);
template<> ::ServerStatusArrayMessage* Arena::CreateMaybeMessage<::ServerStatusArrayMessage>(Arena*);
template<> ::ServerStatusMessage* Arena::CreateMaybeMessage<::ServerStatusMessage>(Arena*);
template<> ::StringArrayMessage* Arena::CreateMaybeMessage<::StringArrayMessage>(Arena*);
template<> ::StringMessage* Arena::CreateMaybeMessage<::StringMessage>(Arena*);
template<> ::ThreadMessage* Arena::CreateMaybeMessage<::ThreadMessage>(Arena*);
template<> ::WorkerFutureMessage* Arena::CreateMaybeMessage<::WorkerFutureMessage>(Arena*);
template<> ::WorkerStatusMessage* Arena::CreateMaybeMessage<::WorkerStatusMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class StringMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StringMessage) */ {
 public:
  inline StringMessage() : StringMessage(nullptr) {}
  virtual ~StringMessage();
  explicit constexpr StringMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringMessage(const StringMessage& from);
  StringMessage(StringMessage&& from) noexcept
    : StringMessage() {
    *this = ::std::move(from);
  }

  inline StringMessage& operator=(const StringMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringMessage& operator=(StringMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringMessage* internal_default_instance() {
    return reinterpret_cast<const StringMessage*>(
               &_StringMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StringMessage& a, StringMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StringMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringMessage* New() const final {
    return CreateMaybeMessage<StringMessage>(nullptr);
  }

  StringMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringMessage& from);
  void MergeFrom(const StringMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StringMessage";
  }
  protected:
  explicit StringMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // string val = 1;
  void clear_val();
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // @@protoc_insertion_point(class_scope:StringMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class IntegerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IntegerMessage) */ {
 public:
  inline IntegerMessage() : IntegerMessage(nullptr) {}
  virtual ~IntegerMessage();
  explicit constexpr IntegerMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntegerMessage(const IntegerMessage& from);
  IntegerMessage(IntegerMessage&& from) noexcept
    : IntegerMessage() {
    *this = ::std::move(from);
  }

  inline IntegerMessage& operator=(const IntegerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegerMessage& operator=(IntegerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntegerMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntegerMessage* internal_default_instance() {
    return reinterpret_cast<const IntegerMessage*>(
               &_IntegerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IntegerMessage& a, IntegerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntegerMessage* New() const final {
    return CreateMaybeMessage<IntegerMessage>(nullptr);
  }

  IntegerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntegerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntegerMessage& from);
  void MergeFrom(const IntegerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IntegerMessage";
  }
  protected:
  explicit IntegerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // int32 val = 1;
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IntegerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LongMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LongMessage) */ {
 public:
  inline LongMessage() : LongMessage(nullptr) {}
  virtual ~LongMessage();
  explicit constexpr LongMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LongMessage(const LongMessage& from);
  LongMessage(LongMessage&& from) noexcept
    : LongMessage() {
    *this = ::std::move(from);
  }

  inline LongMessage& operator=(const LongMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongMessage& operator=(LongMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LongMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LongMessage* internal_default_instance() {
    return reinterpret_cast<const LongMessage*>(
               &_LongMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LongMessage& a, LongMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LongMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LongMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LongMessage* New() const final {
    return CreateMaybeMessage<LongMessage>(nullptr);
  }

  LongMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LongMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LongMessage& from);
  void MergeFrom(const LongMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LongMessage";
  }
  protected:
  explicit LongMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // int64 val = 1;
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::int64 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:LongMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FloatMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FloatMessage) */ {
 public:
  inline FloatMessage() : FloatMessage(nullptr) {}
  virtual ~FloatMessage();
  explicit constexpr FloatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatMessage(const FloatMessage& from);
  FloatMessage(FloatMessage&& from) noexcept
    : FloatMessage() {
    *this = ::std::move(from);
  }

  inline FloatMessage& operator=(const FloatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatMessage& operator=(FloatMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatMessage* internal_default_instance() {
    return reinterpret_cast<const FloatMessage*>(
               &_FloatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FloatMessage& a, FloatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatMessage* New() const final {
    return CreateMaybeMessage<FloatMessage>(nullptr);
  }

  FloatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatMessage& from);
  void MergeFrom(const FloatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FloatMessage";
  }
  protected:
  explicit FloatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // float val = 1;
  void clear_val();
  float val() const;
  void set_val(float value);
  private:
  float _internal_val() const;
  void _internal_set_val(float value);
  public:

  // @@protoc_insertion_point(class_scope:FloatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DoubleMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DoubleMessage) */ {
 public:
  inline DoubleMessage() : DoubleMessage(nullptr) {}
  virtual ~DoubleMessage();
  explicit constexpr DoubleMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleMessage(const DoubleMessage& from);
  DoubleMessage(DoubleMessage&& from) noexcept
    : DoubleMessage() {
    *this = ::std::move(from);
  }

  inline DoubleMessage& operator=(const DoubleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleMessage& operator=(DoubleMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleMessage* internal_default_instance() {
    return reinterpret_cast<const DoubleMessage*>(
               &_DoubleMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DoubleMessage& a, DoubleMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleMessage* New() const final {
    return CreateMaybeMessage<DoubleMessage>(nullptr);
  }

  DoubleMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleMessage& from);
  void MergeFrom(const DoubleMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DoubleMessage";
  }
  protected:
  explicit DoubleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // double val = 1;
  void clear_val();
  double val() const;
  void set_val(double value);
  private:
  double _internal_val() const;
  void _internal_set_val(double value);
  public:

  // @@protoc_insertion_point(class_scope:DoubleMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class StringArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StringArrayMessage) */ {
 public:
  inline StringArrayMessage() : StringArrayMessage(nullptr) {}
  virtual ~StringArrayMessage();
  explicit constexpr StringArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringArrayMessage(const StringArrayMessage& from);
  StringArrayMessage(StringArrayMessage&& from) noexcept
    : StringArrayMessage() {
    *this = ::std::move(from);
  }

  inline StringArrayMessage& operator=(const StringArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringArrayMessage& operator=(StringArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringArrayMessage* internal_default_instance() {
    return reinterpret_cast<const StringArrayMessage*>(
               &_StringArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StringArrayMessage& a, StringArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StringArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringArrayMessage* New() const final {
    return CreateMaybeMessage<StringArrayMessage>(nullptr);
  }

  StringArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringArrayMessage& from);
  void MergeFrom(const StringArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StringArrayMessage";
  }
  protected:
  explicit StringArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated string arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  const std::string& arr(int index) const;
  std::string* mutable_arr(int index);
  void set_arr(int index, const std::string& value);
  void set_arr(int index, std::string&& value);
  void set_arr(int index, const char* value);
  void set_arr(int index, const char* value, size_t size);
  std::string* add_arr();
  void add_arr(const std::string& value);
  void add_arr(std::string&& value);
  void add_arr(const char* value);
  void add_arr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_arr();
  private:
  const std::string& _internal_arr(int index) const;
  std::string* _internal_add_arr();
  public:

  // @@protoc_insertion_point(class_scope:StringArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class IntegerArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IntegerArrayMessage) */ {
 public:
  inline IntegerArrayMessage() : IntegerArrayMessage(nullptr) {}
  virtual ~IntegerArrayMessage();
  explicit constexpr IntegerArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntegerArrayMessage(const IntegerArrayMessage& from);
  IntegerArrayMessage(IntegerArrayMessage&& from) noexcept
    : IntegerArrayMessage() {
    *this = ::std::move(from);
  }

  inline IntegerArrayMessage& operator=(const IntegerArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegerArrayMessage& operator=(IntegerArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntegerArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntegerArrayMessage* internal_default_instance() {
    return reinterpret_cast<const IntegerArrayMessage*>(
               &_IntegerArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IntegerArrayMessage& a, IntegerArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegerArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegerArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntegerArrayMessage* New() const final {
    return CreateMaybeMessage<IntegerArrayMessage>(nullptr);
  }

  IntegerArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntegerArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntegerArrayMessage& from);
  void MergeFrom(const IntegerArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegerArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IntegerArrayMessage";
  }
  protected:
  explicit IntegerArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated int32 arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_arr() const;
  void _internal_add_arr(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_arr();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 arr(int index) const;
  void set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_arr(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_arr();

  // @@protoc_insertion_point(class_scope:IntegerArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > arr_;
  mutable std::atomic<int> _arr_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LongArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LongArrayMessage) */ {
 public:
  inline LongArrayMessage() : LongArrayMessage(nullptr) {}
  virtual ~LongArrayMessage();
  explicit constexpr LongArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LongArrayMessage(const LongArrayMessage& from);
  LongArrayMessage(LongArrayMessage&& from) noexcept
    : LongArrayMessage() {
    *this = ::std::move(from);
  }

  inline LongArrayMessage& operator=(const LongArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongArrayMessage& operator=(LongArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LongArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LongArrayMessage* internal_default_instance() {
    return reinterpret_cast<const LongArrayMessage*>(
               &_LongArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LongArrayMessage& a, LongArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(LongArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LongArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LongArrayMessage* New() const final {
    return CreateMaybeMessage<LongArrayMessage>(nullptr);
  }

  LongArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LongArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LongArrayMessage& from);
  void MergeFrom(const LongArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LongArrayMessage";
  }
  protected:
  explicit LongArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated int64 arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_arr() const;
  void _internal_add_arr(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_arr();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 arr(int index) const;
  void set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_arr(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_arr();

  // @@protoc_insertion_point(class_scope:LongArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > arr_;
  mutable std::atomic<int> _arr_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FloatArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FloatArrayMessage) */ {
 public:
  inline FloatArrayMessage() : FloatArrayMessage(nullptr) {}
  virtual ~FloatArrayMessage();
  explicit constexpr FloatArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatArrayMessage(const FloatArrayMessage& from);
  FloatArrayMessage(FloatArrayMessage&& from) noexcept
    : FloatArrayMessage() {
    *this = ::std::move(from);
  }

  inline FloatArrayMessage& operator=(const FloatArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatArrayMessage& operator=(FloatArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatArrayMessage* internal_default_instance() {
    return reinterpret_cast<const FloatArrayMessage*>(
               &_FloatArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FloatArrayMessage& a, FloatArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatArrayMessage* New() const final {
    return CreateMaybeMessage<FloatArrayMessage>(nullptr);
  }

  FloatArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatArrayMessage& from);
  void MergeFrom(const FloatArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FloatArrayMessage";
  }
  protected:
  explicit FloatArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated float arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  float _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arr() const;
  void _internal_add_arr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arr();
  public:
  float arr(int index) const;
  void set_arr(int index, float value);
  void add_arr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arr();

  // @@protoc_insertion_point(class_scope:FloatArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arr_;
  mutable std::atomic<int> _arr_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DoubleArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DoubleArrayMessage) */ {
 public:
  inline DoubleArrayMessage() : DoubleArrayMessage(nullptr) {}
  virtual ~DoubleArrayMessage();
  explicit constexpr DoubleArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleArrayMessage(const DoubleArrayMessage& from);
  DoubleArrayMessage(DoubleArrayMessage&& from) noexcept
    : DoubleArrayMessage() {
    *this = ::std::move(from);
  }

  inline DoubleArrayMessage& operator=(const DoubleArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleArrayMessage& operator=(DoubleArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleArrayMessage* internal_default_instance() {
    return reinterpret_cast<const DoubleArrayMessage*>(
               &_DoubleArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DoubleArrayMessage& a, DoubleArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleArrayMessage* New() const final {
    return CreateMaybeMessage<DoubleArrayMessage>(nullptr);
  }

  DoubleArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleArrayMessage& from);
  void MergeFrom(const DoubleArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DoubleArrayMessage";
  }
  protected:
  explicit DoubleArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated double arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  double _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_arr() const;
  void _internal_add_arr(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_arr();
  public:
  double arr(int index) const;
  void set_arr(int index, double value);
  void add_arr(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_arr();

  // @@protoc_insertion_point(class_scope:DoubleArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > arr_;
  mutable std::atomic<int> _arr_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CommandArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommandArrayMessage) */ {
 public:
  inline CommandArrayMessage() : CommandArrayMessage(nullptr) {}
  virtual ~CommandArrayMessage();
  explicit constexpr CommandArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandArrayMessage(const CommandArrayMessage& from);
  CommandArrayMessage(CommandArrayMessage&& from) noexcept
    : CommandArrayMessage() {
    *this = ::std::move(from);
  }

  inline CommandArrayMessage& operator=(const CommandArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandArrayMessage& operator=(CommandArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandArrayMessage* internal_default_instance() {
    return reinterpret_cast<const CommandArrayMessage*>(
               &_CommandArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CommandArrayMessage& a, CommandArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandArrayMessage* New() const final {
    return CreateMaybeMessage<CommandArrayMessage>(nullptr);
  }

  CommandArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandArrayMessage& from);
  void MergeFrom(const CommandArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommandArrayMessage";
  }
  protected:
  explicit CommandArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandArrFieldNumber = 1,
  };
  // repeated .CommandMessage command_arr = 1;
  int command_arr_size() const;
  private:
  int _internal_command_arr_size() const;
  public:
  void clear_command_arr();
  ::CommandMessage* mutable_command_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommandMessage >*
      mutable_command_arr();
  private:
  const ::CommandMessage& _internal_command_arr(int index) const;
  ::CommandMessage* _internal_add_command_arr();
  public:
  const ::CommandMessage& command_arr(int index) const;
  ::CommandMessage* add_command_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommandMessage >&
      command_arr() const;

  // @@protoc_insertion_point(class_scope:CommandArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommandMessage > command_arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CommandMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommandMessage) */ {
 public:
  inline CommandMessage() : CommandMessage(nullptr) {}
  virtual ~CommandMessage();
  explicit constexpr CommandMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMessage(const CommandMessage& from);
  CommandMessage(CommandMessage&& from) noexcept
    : CommandMessage() {
    *this = ::std::move(from);
  }

  inline CommandMessage& operator=(const CommandMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMessage& operator=(CommandMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMessage* internal_default_instance() {
    return reinterpret_cast<const CommandMessage*>(
               &_CommandMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CommandMessage& a, CommandMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandMessage* New() const final {
    return CreateMaybeMessage<CommandMessage>(nullptr);
  }

  CommandMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandMessage& from);
  void MergeFrom(const CommandMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommandMessage";
  }
  protected:
  explicit CommandMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kWorkerNameFieldNumber = 2,
    kCmdTypeFieldNumber = 3,
  };
  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string worker_name = 2;
  void clear_worker_name();
  const std::string& worker_name() const;
  void set_worker_name(const std::string& value);
  void set_worker_name(std::string&& value);
  void set_worker_name(const char* value);
  void set_worker_name(const char* value, size_t size);
  std::string* mutable_worker_name();
  std::string* release_worker_name();
  void set_allocated_worker_name(std::string* worker_name);
  private:
  const std::string& _internal_worker_name() const;
  void _internal_set_worker_name(const std::string& value);
  std::string* _internal_mutable_worker_name();
  public:

  // string cmd_type = 3;
  void clear_cmd_type();
  const std::string& cmd_type() const;
  void set_cmd_type(const std::string& value);
  void set_cmd_type(std::string&& value);
  void set_cmd_type(const char* value);
  void set_cmd_type(const char* value, size_t size);
  std::string* mutable_cmd_type();
  std::string* release_cmd_type();
  void set_allocated_cmd_type(std::string* cmd_type);
  private:
  const std::string& _internal_cmd_type() const;
  void _internal_set_cmd_type(const std::string& value);
  std::string* _internal_mutable_cmd_type();
  public:

  // @@protoc_insertion_point(class_scope:CommandMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ServerStatusArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerStatusArrayMessage) */ {
 public:
  inline ServerStatusArrayMessage() : ServerStatusArrayMessage(nullptr) {}
  virtual ~ServerStatusArrayMessage();
  explicit constexpr ServerStatusArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerStatusArrayMessage(const ServerStatusArrayMessage& from);
  ServerStatusArrayMessage(ServerStatusArrayMessage&& from) noexcept
    : ServerStatusArrayMessage() {
    *this = ::std::move(from);
  }

  inline ServerStatusArrayMessage& operator=(const ServerStatusArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerStatusArrayMessage& operator=(ServerStatusArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerStatusArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerStatusArrayMessage* internal_default_instance() {
    return reinterpret_cast<const ServerStatusArrayMessage*>(
               &_ServerStatusArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ServerStatusArrayMessage& a, ServerStatusArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerStatusArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerStatusArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerStatusArrayMessage* New() const final {
    return CreateMaybeMessage<ServerStatusArrayMessage>(nullptr);
  }

  ServerStatusArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerStatusArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerStatusArrayMessage& from);
  void MergeFrom(const ServerStatusArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerStatusArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerStatusArrayMessage";
  }
  protected:
  explicit ServerStatusArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerStatusArrFieldNumber = 1,
  };
  // repeated .ServerStatusMessage server_status_arr = 1;
  int server_status_arr_size() const;
  private:
  int _internal_server_status_arr_size() const;
  public:
  void clear_server_status_arr();
  ::ServerStatusMessage* mutable_server_status_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerStatusMessage >*
      mutable_server_status_arr();
  private:
  const ::ServerStatusMessage& _internal_server_status_arr(int index) const;
  ::ServerStatusMessage* _internal_add_server_status_arr();
  public:
  const ::ServerStatusMessage& server_status_arr(int index) const;
  ::ServerStatusMessage* add_server_status_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerStatusMessage >&
      server_status_arr() const;

  // @@protoc_insertion_point(class_scope:ServerStatusArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerStatusMessage > server_status_arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ServerStatusMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerStatusMessage) */ {
 public:
  inline ServerStatusMessage() : ServerStatusMessage(nullptr) {}
  virtual ~ServerStatusMessage();
  explicit constexpr ServerStatusMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerStatusMessage(const ServerStatusMessage& from);
  ServerStatusMessage(ServerStatusMessage&& from) noexcept
    : ServerStatusMessage() {
    *this = ::std::move(from);
  }

  inline ServerStatusMessage& operator=(const ServerStatusMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerStatusMessage& operator=(ServerStatusMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerStatusMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerStatusMessage* internal_default_instance() {
    return reinterpret_cast<const ServerStatusMessage*>(
               &_ServerStatusMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ServerStatusMessage& a, ServerStatusMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerStatusMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerStatusMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerStatusMessage* New() const final {
    return CreateMaybeMessage<ServerStatusMessage>(nullptr);
  }

  ServerStatusMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerStatusMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerStatusMessage& from);
  void MergeFrom(const ServerStatusMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerStatusMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerStatusMessage";
  }
  protected:
  explicit ServerStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerStatusArrFieldNumber = 2,
    kAddrFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // repeated .WorkerStatusMessage worker_status_arr = 2;
  int worker_status_arr_size() const;
  private:
  int _internal_worker_status_arr_size() const;
  public:
  void clear_worker_status_arr();
  ::WorkerStatusMessage* mutable_worker_status_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkerStatusMessage >*
      mutable_worker_status_arr();
  private:
  const ::WorkerStatusMessage& _internal_worker_status_arr(int index) const;
  ::WorkerStatusMessage* _internal_add_worker_status_arr();
  public:
  const ::WorkerStatusMessage& worker_status_arr(int index) const;
  ::WorkerStatusMessage* add_worker_status_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkerStatusMessage >&
      worker_status_arr() const;

  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string status = 3;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:ServerStatusMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkerStatusMessage > worker_status_arr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class WorkerStatusMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorkerStatusMessage) */ {
 public:
  inline WorkerStatusMessage() : WorkerStatusMessage(nullptr) {}
  virtual ~WorkerStatusMessage();
  explicit constexpr WorkerStatusMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkerStatusMessage(const WorkerStatusMessage& from);
  WorkerStatusMessage(WorkerStatusMessage&& from) noexcept
    : WorkerStatusMessage() {
    *this = ::std::move(from);
  }

  inline WorkerStatusMessage& operator=(const WorkerStatusMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerStatusMessage& operator=(WorkerStatusMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerStatusMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkerStatusMessage* internal_default_instance() {
    return reinterpret_cast<const WorkerStatusMessage*>(
               &_WorkerStatusMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(WorkerStatusMessage& a, WorkerStatusMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerStatusMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerStatusMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerStatusMessage* New() const final {
    return CreateMaybeMessage<WorkerStatusMessage>(nullptr);
  }

  WorkerStatusMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerStatusMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerStatusMessage& from);
  void MergeFrom(const WorkerStatusMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerStatusMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorkerStatusMessage";
  }
  protected:
  explicit WorkerStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuturesFieldNumber = 3,
    kWorkerNameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .WorkerFutureMessage futures = 3;
  int futures_size() const;
  private:
  int _internal_futures_size() const;
  public:
  void clear_futures();
  ::WorkerFutureMessage* mutable_futures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkerFutureMessage >*
      mutable_futures();
  private:
  const ::WorkerFutureMessage& _internal_futures(int index) const;
  ::WorkerFutureMessage* _internal_add_futures();
  public:
  const ::WorkerFutureMessage& futures(int index) const;
  ::WorkerFutureMessage* add_futures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkerFutureMessage >&
      futures() const;

  // string worker_name = 1;
  void clear_worker_name();
  const std::string& worker_name() const;
  void set_worker_name(const std::string& value);
  void set_worker_name(std::string&& value);
  void set_worker_name(const char* value);
  void set_worker_name(const char* value, size_t size);
  std::string* mutable_worker_name();
  std::string* release_worker_name();
  void set_allocated_worker_name(std::string* worker_name);
  private:
  const std::string& _internal_worker_name() const;
  void _internal_set_worker_name(const std::string& value);
  std::string* _internal_mutable_worker_name();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:WorkerStatusMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkerFutureMessage > futures_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class WorkerFutureMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorkerFutureMessage) */ {
 public:
  inline WorkerFutureMessage() : WorkerFutureMessage(nullptr) {}
  virtual ~WorkerFutureMessage();
  explicit constexpr WorkerFutureMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkerFutureMessage(const WorkerFutureMessage& from);
  WorkerFutureMessage(WorkerFutureMessage&& from) noexcept
    : WorkerFutureMessage() {
    *this = ::std::move(from);
  }

  inline WorkerFutureMessage& operator=(const WorkerFutureMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerFutureMessage& operator=(WorkerFutureMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerFutureMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkerFutureMessage* internal_default_instance() {
    return reinterpret_cast<const WorkerFutureMessage*>(
               &_WorkerFutureMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(WorkerFutureMessage& a, WorkerFutureMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerFutureMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerFutureMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerFutureMessage* New() const final {
    return CreateMaybeMessage<WorkerFutureMessage>(nullptr);
  }

  WorkerFutureMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerFutureMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerFutureMessage& from);
  void MergeFrom(const WorkerFutureMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerFutureMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorkerFutureMessage";
  }
  protected:
  explicit WorkerFutureMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kDescFieldNumber = 2,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string desc = 2;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // @@protoc_insertion_point(class_scope:WorkerFutureMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FetchRequestArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FetchRequestArrayMessage) */ {
 public:
  inline FetchRequestArrayMessage() : FetchRequestArrayMessage(nullptr) {}
  virtual ~FetchRequestArrayMessage();
  explicit constexpr FetchRequestArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchRequestArrayMessage(const FetchRequestArrayMessage& from);
  FetchRequestArrayMessage(FetchRequestArrayMessage&& from) noexcept
    : FetchRequestArrayMessage() {
    *this = ::std::move(from);
  }

  inline FetchRequestArrayMessage& operator=(const FetchRequestArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchRequestArrayMessage& operator=(FetchRequestArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchRequestArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchRequestArrayMessage* internal_default_instance() {
    return reinterpret_cast<const FetchRequestArrayMessage*>(
               &_FetchRequestArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FetchRequestArrayMessage& a, FetchRequestArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchRequestArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchRequestArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchRequestArrayMessage* New() const final {
    return CreateMaybeMessage<FetchRequestArrayMessage>(nullptr);
  }

  FetchRequestArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchRequestArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchRequestArrayMessage& from);
  void MergeFrom(const FetchRequestArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchRequestArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FetchRequestArrayMessage";
  }
  protected:
  explicit FetchRequestArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFetchRequestArrFieldNumber = 1,
  };
  // repeated .FetchRequestMessage fetch_request_arr = 1;
  int fetch_request_arr_size() const;
  private:
  int _internal_fetch_request_arr_size() const;
  public:
  void clear_fetch_request_arr();
  ::FetchRequestMessage* mutable_fetch_request_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FetchRequestMessage >*
      mutable_fetch_request_arr();
  private:
  const ::FetchRequestMessage& _internal_fetch_request_arr(int index) const;
  ::FetchRequestMessage* _internal_add_fetch_request_arr();
  public:
  const ::FetchRequestMessage& fetch_request_arr(int index) const;
  ::FetchRequestMessage* add_fetch_request_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FetchRequestMessage >&
      fetch_request_arr() const;

  // @@protoc_insertion_point(class_scope:FetchRequestArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FetchRequestMessage > fetch_request_arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FetchRequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FetchRequestMessage) */ {
 public:
  inline FetchRequestMessage() : FetchRequestMessage(nullptr) {}
  virtual ~FetchRequestMessage();
  explicit constexpr FetchRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchRequestMessage(const FetchRequestMessage& from);
  FetchRequestMessage(FetchRequestMessage&& from) noexcept
    : FetchRequestMessage() {
    *this = ::std::move(from);
  }

  inline FetchRequestMessage& operator=(const FetchRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchRequestMessage& operator=(FetchRequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchRequestMessage* internal_default_instance() {
    return reinterpret_cast<const FetchRequestMessage*>(
               &_FetchRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FetchRequestMessage& a, FetchRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchRequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchRequestMessage* New() const final {
    return CreateMaybeMessage<FetchRequestMessage>(nullptr);
  }

  FetchRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchRequestMessage& from);
  void MergeFrom(const FetchRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FetchRequestMessage";
  }
  protected:
  explicit FetchRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFutureArrFieldNumber = 2,
    kParamArrFieldNumber = 3,
    kAddrFieldNumber = 1,
  };
  // repeated string future_arr = 2;
  int future_arr_size() const;
  private:
  int _internal_future_arr_size() const;
  public:
  void clear_future_arr();
  const std::string& future_arr(int index) const;
  std::string* mutable_future_arr(int index);
  void set_future_arr(int index, const std::string& value);
  void set_future_arr(int index, std::string&& value);
  void set_future_arr(int index, const char* value);
  void set_future_arr(int index, const char* value, size_t size);
  std::string* add_future_arr();
  void add_future_arr(const std::string& value);
  void add_future_arr(std::string&& value);
  void add_future_arr(const char* value);
  void add_future_arr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& future_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_future_arr();
  private:
  const std::string& _internal_future_arr(int index) const;
  std::string* _internal_add_future_arr();
  public:

  // repeated string param_arr = 3;
  int param_arr_size() const;
  private:
  int _internal_param_arr_size() const;
  public:
  void clear_param_arr();
  const std::string& param_arr(int index) const;
  std::string* mutable_param_arr(int index);
  void set_param_arr(int index, const std::string& value);
  void set_param_arr(int index, std::string&& value);
  void set_param_arr(int index, const char* value);
  void set_param_arr(int index, const char* value, size_t size);
  std::string* add_param_arr();
  void add_param_arr(const std::string& value);
  void add_param_arr(std::string&& value);
  void add_param_arr(const char* value);
  void add_param_arr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& param_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_param_arr();
  private:
  const std::string& _internal_param_arr(int index) const;
  std::string* _internal_add_param_arr();
  public:

  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // @@protoc_insertion_point(class_scope:FetchRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> future_arr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> param_arr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FetchReplyArrayMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FetchReplyArrayMessage) */ {
 public:
  inline FetchReplyArrayMessage() : FetchReplyArrayMessage(nullptr) {}
  virtual ~FetchReplyArrayMessage();
  explicit constexpr FetchReplyArrayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchReplyArrayMessage(const FetchReplyArrayMessage& from);
  FetchReplyArrayMessage(FetchReplyArrayMessage&& from) noexcept
    : FetchReplyArrayMessage() {
    *this = ::std::move(from);
  }

  inline FetchReplyArrayMessage& operator=(const FetchReplyArrayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchReplyArrayMessage& operator=(FetchReplyArrayMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchReplyArrayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchReplyArrayMessage* internal_default_instance() {
    return reinterpret_cast<const FetchReplyArrayMessage*>(
               &_FetchReplyArrayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FetchReplyArrayMessage& a, FetchReplyArrayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchReplyArrayMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchReplyArrayMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchReplyArrayMessage* New() const final {
    return CreateMaybeMessage<FetchReplyArrayMessage>(nullptr);
  }

  FetchReplyArrayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchReplyArrayMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchReplyArrayMessage& from);
  void MergeFrom(const FetchReplyArrayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchReplyArrayMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FetchReplyArrayMessage";
  }
  protected:
  explicit FetchReplyArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFetchReplyArrFieldNumber = 1,
  };
  // repeated .FetchReplyMessage fetch_reply_arr = 1;
  int fetch_reply_arr_size() const;
  private:
  int _internal_fetch_reply_arr_size() const;
  public:
  void clear_fetch_reply_arr();
  ::FetchReplyMessage* mutable_fetch_reply_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FetchReplyMessage >*
      mutable_fetch_reply_arr();
  private:
  const ::FetchReplyMessage& _internal_fetch_reply_arr(int index) const;
  ::FetchReplyMessage* _internal_add_fetch_reply_arr();
  public:
  const ::FetchReplyMessage& fetch_reply_arr(int index) const;
  ::FetchReplyMessage* add_fetch_reply_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FetchReplyMessage >&
      fetch_reply_arr() const;

  // @@protoc_insertion_point(class_scope:FetchReplyArrayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FetchReplyMessage > fetch_reply_arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FetchReplyMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FetchReplyMessage) */ {
 public:
  inline FetchReplyMessage() : FetchReplyMessage(nullptr) {}
  virtual ~FetchReplyMessage();
  explicit constexpr FetchReplyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchReplyMessage(const FetchReplyMessage& from);
  FetchReplyMessage(FetchReplyMessage&& from) noexcept
    : FetchReplyMessage() {
    *this = ::std::move(from);
  }

  inline FetchReplyMessage& operator=(const FetchReplyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchReplyMessage& operator=(FetchReplyMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchReplyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchReplyMessage* internal_default_instance() {
    return reinterpret_cast<const FetchReplyMessage*>(
               &_FetchReplyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FetchReplyMessage& a, FetchReplyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchReplyMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchReplyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchReplyMessage* New() const final {
    return CreateMaybeMessage<FetchReplyMessage>(nullptr);
  }

  FetchReplyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchReplyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchReplyMessage& from);
  void MergeFrom(const FetchReplyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchReplyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FetchReplyMessage";
  }
  protected:
  explicit FetchReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 6,
    kAddrFieldNumber = 1,
    kCpuMessageFieldNumber = 2,
    kMemUsageMessageFieldNumber = 3,
    kMemoryMonitorMessageFieldNumber = 4,
    kMemLeakMessageFieldNumber = 5,
  };
  // repeated string infos = 6;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  const std::string& infos(int index) const;
  std::string* mutable_infos(int index);
  void set_infos(int index, const std::string& value);
  void set_infos(int index, std::string&& value);
  void set_infos(int index, const char* value);
  void set_infos(int index, const char* value, size_t size);
  std::string* add_infos();
  void add_infos(const std::string& value);
  void add_infos(std::string&& value);
  void add_infos(const char* value);
  void add_infos(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& infos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_infos();
  private:
  const std::string& _internal_infos(int index) const;
  std::string* _internal_add_infos();
  public:

  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // .CpuMessage cpu_message = 2;
  bool has_cpu_message() const;
  private:
  bool _internal_has_cpu_message() const;
  public:
  void clear_cpu_message();
  const ::CpuMessage& cpu_message() const;
  ::CpuMessage* release_cpu_message();
  ::CpuMessage* mutable_cpu_message();
  void set_allocated_cpu_message(::CpuMessage* cpu_message);
  private:
  const ::CpuMessage& _internal_cpu_message() const;
  ::CpuMessage* _internal_mutable_cpu_message();
  public:
  void unsafe_arena_set_allocated_cpu_message(
      ::CpuMessage* cpu_message);
  ::CpuMessage* unsafe_arena_release_cpu_message();

  // .MemUsageMessage mem_usage_message = 3;
  bool has_mem_usage_message() const;
  private:
  bool _internal_has_mem_usage_message() const;
  public:
  void clear_mem_usage_message();
  const ::MemUsageMessage& mem_usage_message() const;
  ::MemUsageMessage* release_mem_usage_message();
  ::MemUsageMessage* mutable_mem_usage_message();
  void set_allocated_mem_usage_message(::MemUsageMessage* mem_usage_message);
  private:
  const ::MemUsageMessage& _internal_mem_usage_message() const;
  ::MemUsageMessage* _internal_mutable_mem_usage_message();
  public:
  void unsafe_arena_set_allocated_mem_usage_message(
      ::MemUsageMessage* mem_usage_message);
  ::MemUsageMessage* unsafe_arena_release_mem_usage_message();

  // .MemoryMonitorMessage memory_monitor_message = 4;
  bool has_memory_monitor_message() const;
  private:
  bool _internal_has_memory_monitor_message() const;
  public:
  void clear_memory_monitor_message();
  const ::MemoryMonitorMessage& memory_monitor_message() const;
  ::MemoryMonitorMessage* release_memory_monitor_message();
  ::MemoryMonitorMessage* mutable_memory_monitor_message();
  void set_allocated_memory_monitor_message(::MemoryMonitorMessage* memory_monitor_message);
  private:
  const ::MemoryMonitorMessage& _internal_memory_monitor_message() const;
  ::MemoryMonitorMessage* _internal_mutable_memory_monitor_message();
  public:
  void unsafe_arena_set_allocated_memory_monitor_message(
      ::MemoryMonitorMessage* memory_monitor_message);
  ::MemoryMonitorMessage* unsafe_arena_release_memory_monitor_message();

  // .MemLeakMessage mem_leak_message = 5;
  bool has_mem_leak_message() const;
  private:
  bool _internal_has_mem_leak_message() const;
  public:
  void clear_mem_leak_message();
  const ::MemLeakMessage& mem_leak_message() const;
  ::MemLeakMessage* release_mem_leak_message();
  ::MemLeakMessage* mutable_mem_leak_message();
  void set_allocated_mem_leak_message(::MemLeakMessage* mem_leak_message);
  private:
  const ::MemLeakMessage& _internal_mem_leak_message() const;
  ::MemLeakMessage* _internal_mutable_mem_leak_message();
  public:
  void unsafe_arena_set_allocated_mem_leak_message(
      ::MemLeakMessage* mem_leak_message);
  ::MemLeakMessage* unsafe_arena_release_mem_leak_message();

  // @@protoc_insertion_point(class_scope:FetchReplyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::CpuMessage* cpu_message_;
  ::MemUsageMessage* mem_usage_message_;
  ::MemoryMonitorMessage* memory_monitor_message_;
  ::MemLeakMessage* mem_leak_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CpuMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CpuMessage) */ {
 public:
  inline CpuMessage() : CpuMessage(nullptr) {}
  virtual ~CpuMessage();
  explicit constexpr CpuMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuMessage(const CpuMessage& from);
  CpuMessage(CpuMessage&& from) noexcept
    : CpuMessage() {
    *this = ::std::move(from);
  }

  inline CpuMessage& operator=(const CpuMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuMessage& operator=(CpuMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuMessage* internal_default_instance() {
    return reinterpret_cast<const CpuMessage*>(
               &_CpuMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CpuMessage& a, CpuMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuMessage* New() const final {
    return CreateMaybeMessage<CpuMessage>(nullptr);
  }

  CpuMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuMessage& from);
  void MergeFrom(const CpuMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CpuMessage";
  }
  protected:
  explicit CpuMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsageArrFieldNumber = 2,
    kCoreNumFieldNumber = 1,
  };
  // repeated float usage_arr = 2;
  int usage_arr_size() const;
  private:
  int _internal_usage_arr_size() const;
  public:
  void clear_usage_arr();
  private:
  float _internal_usage_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_usage_arr() const;
  void _internal_add_usage_arr(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_usage_arr();
  public:
  float usage_arr(int index) const;
  void set_usage_arr(int index, float value);
  void add_usage_arr(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      usage_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_usage_arr();

  // int32 core_num = 1;
  void clear_core_num();
  ::PROTOBUF_NAMESPACE_ID::int32 core_num() const;
  void set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_core_num() const;
  void _internal_set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CpuMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > usage_arr_;
  mutable std::atomic<int> _usage_arr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 core_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MemUsageMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MemUsageMessage) */ {
 public:
  inline MemUsageMessage() : MemUsageMessage(nullptr) {}
  virtual ~MemUsageMessage();
  explicit constexpr MemUsageMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemUsageMessage(const MemUsageMessage& from);
  MemUsageMessage(MemUsageMessage&& from) noexcept
    : MemUsageMessage() {
    *this = ::std::move(from);
  }

  inline MemUsageMessage& operator=(const MemUsageMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemUsageMessage& operator=(MemUsageMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemUsageMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemUsageMessage* internal_default_instance() {
    return reinterpret_cast<const MemUsageMessage*>(
               &_MemUsageMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MemUsageMessage& a, MemUsageMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MemUsageMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemUsageMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemUsageMessage* New() const final {
    return CreateMaybeMessage<MemUsageMessage>(nullptr);
  }

  MemUsageMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemUsageMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemUsageMessage& from);
  void MergeFrom(const MemUsageMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemUsageMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MemUsageMessage";
  }
  protected:
  explicit MemUsageMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kAvailableFieldNumber = 2,
    kUsedFieldNumber = 3,
    kFreeFieldNumber = 4,
    kActiveFieldNumber = 5,
    kInactiveFieldNumber = 6,
    kBuffersFieldNumber = 7,
    kCachedFieldNumber = 8,
    kWiredFieldNumber = 9,
  };
  // int64 total = 1;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 available = 2;
  void clear_available();
  ::PROTOBUF_NAMESPACE_ID::int64 available() const;
  void set_available(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_available() const;
  void _internal_set_available(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 used = 3;
  void clear_used();
  ::PROTOBUF_NAMESPACE_ID::int64 used() const;
  void set_used(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_used() const;
  void _internal_set_used(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 free = 4;
  void clear_free();
  ::PROTOBUF_NAMESPACE_ID::int64 free() const;
  void set_free(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_free() const;
  void _internal_set_free(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 active = 5;
  void clear_active();
  ::PROTOBUF_NAMESPACE_ID::int64 active() const;
  void set_active(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_active() const;
  void _internal_set_active(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 inactive = 6;
  void clear_inactive();
  ::PROTOBUF_NAMESPACE_ID::int64 inactive() const;
  void set_inactive(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_inactive() const;
  void _internal_set_inactive(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 buffers = 7;
  void clear_buffers();
  ::PROTOBUF_NAMESPACE_ID::int64 buffers() const;
  void set_buffers(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_buffers() const;
  void _internal_set_buffers(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cached = 8;
  void clear_cached();
  ::PROTOBUF_NAMESPACE_ID::int64 cached() const;
  void set_cached(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cached() const;
  void _internal_set_cached(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 wired = 9;
  void clear_wired();
  ::PROTOBUF_NAMESPACE_ID::int64 wired() const;
  void set_wired(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_wired() const;
  void _internal_set_wired(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:MemUsageMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_;
  ::PROTOBUF_NAMESPACE_ID::int64 available_;
  ::PROTOBUF_NAMESPACE_ID::int64 used_;
  ::PROTOBUF_NAMESPACE_ID::int64 free_;
  ::PROTOBUF_NAMESPACE_ID::int64 active_;
  ::PROTOBUF_NAMESPACE_ID::int64 inactive_;
  ::PROTOBUF_NAMESPACE_ID::int64 buffers_;
  ::PROTOBUF_NAMESPACE_ID::int64 cached_;
  ::PROTOBUF_NAMESPACE_ID::int64 wired_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MemoryMonitorMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MemoryMonitorMessage) */ {
 public:
  inline MemoryMonitorMessage() : MemoryMonitorMessage(nullptr) {}
  virtual ~MemoryMonitorMessage();
  explicit constexpr MemoryMonitorMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryMonitorMessage(const MemoryMonitorMessage& from);
  MemoryMonitorMessage(MemoryMonitorMessage&& from) noexcept
    : MemoryMonitorMessage() {
    *this = ::std::move(from);
  }

  inline MemoryMonitorMessage& operator=(const MemoryMonitorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryMonitorMessage& operator=(MemoryMonitorMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoryMonitorMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryMonitorMessage* internal_default_instance() {
    return reinterpret_cast<const MemoryMonitorMessage*>(
               &_MemoryMonitorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MemoryMonitorMessage& a, MemoryMonitorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryMonitorMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryMonitorMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryMonitorMessage* New() const final {
    return CreateMaybeMessage<MemoryMonitorMessage>(nullptr);
  }

  MemoryMonitorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryMonitorMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoryMonitorMessage& from);
  void MergeFrom(const MemoryMonitorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryMonitorMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MemoryMonitorMessage";
  }
  protected:
  explicit MemoryMonitorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessArrFieldNumber = 1,
  };
  // repeated .ProcessMessage process_arr = 1;
  int process_arr_size() const;
  private:
  int _internal_process_arr_size() const;
  public:
  void clear_process_arr();
  ::ProcessMessage* mutable_process_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProcessMessage >*
      mutable_process_arr();
  private:
  const ::ProcessMessage& _internal_process_arr(int index) const;
  ::ProcessMessage* _internal_add_process_arr();
  public:
  const ::ProcessMessage& process_arr(int index) const;
  ::ProcessMessage* add_process_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProcessMessage >&
      process_arr() const;

  // @@protoc_insertion_point(class_scope:MemoryMonitorMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProcessMessage > process_arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ProcessMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProcessMessage) */ {
 public:
  inline ProcessMessage() : ProcessMessage(nullptr) {}
  virtual ~ProcessMessage();
  explicit constexpr ProcessMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessMessage(const ProcessMessage& from);
  ProcessMessage(ProcessMessage&& from) noexcept
    : ProcessMessage() {
    *this = ::std::move(from);
  }

  inline ProcessMessage& operator=(const ProcessMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessMessage& operator=(ProcessMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessMessage* internal_default_instance() {
    return reinterpret_cast<const ProcessMessage*>(
               &_ProcessMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ProcessMessage& a, ProcessMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessMessage* New() const final {
    return CreateMaybeMessage<ProcessMessage>(nullptr);
  }

  ProcessMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessMessage& from);
  void MergeFrom(const ProcessMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProcessMessage";
  }
  protected:
  explicit ProcessMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadsFieldNumber = 9,
    kNameFieldNumber = 3,
    kCmdlineFieldNumber = 4,
    kUsernameFieldNumber = 8,
    kPidFieldNumber = 1,
    kPpidFieldNumber = 2,
    kCreateTimeFieldNumber = 5,
    kUidFieldNumber = 6,
    kGidFieldNumber = 7,
  };
  // repeated .ThreadMessage threads = 9;
  int threads_size() const;
  private:
  int _internal_threads_size() const;
  public:
  void clear_threads();
  ::ThreadMessage* mutable_threads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ThreadMessage >*
      mutable_threads();
  private:
  const ::ThreadMessage& _internal_threads(int index) const;
  ::ThreadMessage* _internal_add_threads();
  public:
  const ::ThreadMessage& threads(int index) const;
  ::ThreadMessage* add_threads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ThreadMessage >&
      threads() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cmdline = 4;
  void clear_cmdline();
  const std::string& cmdline() const;
  void set_cmdline(const std::string& value);
  void set_cmdline(std::string&& value);
  void set_cmdline(const char* value);
  void set_cmdline(const char* value, size_t size);
  std::string* mutable_cmdline();
  std::string* release_cmdline();
  void set_allocated_cmdline(std::string* cmdline);
  private:
  const std::string& _internal_cmdline() const;
  void _internal_set_cmdline(const std::string& value);
  std::string* _internal_mutable_cmdline();
  public:

  // string username = 8;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // uint32 pid = 1;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ppid = 2;
  void clear_ppid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ppid() const;
  void set_ppid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ppid() const;
  void _internal_set_ppid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double create_time = 5;
  void clear_create_time();
  double create_time() const;
  void set_create_time(double value);
  private:
  double _internal_create_time() const;
  void _internal_set_create_time(double value);
  public:

  // uint32 uid = 6;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gid = 7;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProcessMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ThreadMessage > threads_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmdline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ppid_;
  double create_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ThreadMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ThreadMessage) */ {
 public:
  inline ThreadMessage() : ThreadMessage(nullptr) {}
  virtual ~ThreadMessage();
  explicit constexpr ThreadMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThreadMessage(const ThreadMessage& from);
  ThreadMessage(ThreadMessage&& from) noexcept
    : ThreadMessage() {
    *this = ::std::move(from);
  }

  inline ThreadMessage& operator=(const ThreadMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreadMessage& operator=(ThreadMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThreadMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreadMessage* internal_default_instance() {
    return reinterpret_cast<const ThreadMessage*>(
               &_ThreadMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ThreadMessage& a, ThreadMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreadMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreadMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThreadMessage* New() const final {
    return CreateMaybeMessage<ThreadMessage>(nullptr);
  }

  ThreadMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThreadMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThreadMessage& from);
  void MergeFrom(const ThreadMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ThreadMessage";
  }
  protected:
  explicit ThreadMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTidFieldNumber = 1,
    kRssFieldNumber = 2,
    kVmsFieldNumber = 3,
    kSharedFieldNumber = 4,
    kTextFieldNumber = 5,
    kLibFieldNumber = 6,
    kDataFieldNumber = 7,
    kDirtyFieldNumber = 8,
  };
  // int64 tid = 1;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::int64 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tid() const;
  void _internal_set_tid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 rss = 2;
  void clear_rss();
  ::PROTOBUF_NAMESPACE_ID::int64 rss() const;
  void set_rss(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rss() const;
  void _internal_set_rss(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 vms = 3;
  void clear_vms();
  ::PROTOBUF_NAMESPACE_ID::int64 vms() const;
  void set_vms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_vms() const;
  void _internal_set_vms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 shared = 4;
  void clear_shared();
  ::PROTOBUF_NAMESPACE_ID::int64 shared() const;
  void set_shared(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_shared() const;
  void _internal_set_shared(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 text = 5;
  void clear_text();
  ::PROTOBUF_NAMESPACE_ID::int64 text() const;
  void set_text(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_text() const;
  void _internal_set_text(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 lib = 6;
  void clear_lib();
  ::PROTOBUF_NAMESPACE_ID::int64 lib() const;
  void set_lib(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lib() const;
  void _internal_set_lib(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 data = 7;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::int64 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data() const;
  void _internal_set_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 dirty = 8;
  void clear_dirty();
  ::PROTOBUF_NAMESPACE_ID::int64 dirty() const;
  void set_dirty(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dirty() const;
  void _internal_set_dirty(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ThreadMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 tid_;
  ::PROTOBUF_NAMESPACE_ID::int64 rss_;
  ::PROTOBUF_NAMESPACE_ID::int64 vms_;
  ::PROTOBUF_NAMESPACE_ID::int64 shared_;
  ::PROTOBUF_NAMESPACE_ID::int64 text_;
  ::PROTOBUF_NAMESPACE_ID::int64 lib_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_;
  ::PROTOBUF_NAMESPACE_ID::int64 dirty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MemLeakMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MemLeakMessage) */ {
 public:
  inline MemLeakMessage() : MemLeakMessage(nullptr) {}
  virtual ~MemLeakMessage();
  explicit constexpr MemLeakMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemLeakMessage(const MemLeakMessage& from);
  MemLeakMessage(MemLeakMessage&& from) noexcept
    : MemLeakMessage() {
    *this = ::std::move(from);
  }

  inline MemLeakMessage& operator=(const MemLeakMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemLeakMessage& operator=(MemLeakMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemLeakMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemLeakMessage* internal_default_instance() {
    return reinterpret_cast<const MemLeakMessage*>(
               &_MemLeakMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MemLeakMessage& a, MemLeakMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MemLeakMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemLeakMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemLeakMessage* New() const final {
    return CreateMaybeMessage<MemLeakMessage>(nullptr);
  }

  MemLeakMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemLeakMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemLeakMessage& from);
  void MergeFrom(const MemLeakMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemLeakMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MemLeakMessage";
  }
  protected:
  explicit MemLeakMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMallocEntryArrFieldNumber = 1,
  };
  // repeated .MallocEntryMessage malloc_entry_arr = 1;
  int malloc_entry_arr_size() const;
  private:
  int _internal_malloc_entry_arr_size() const;
  public:
  void clear_malloc_entry_arr();
  ::MallocEntryMessage* mutable_malloc_entry_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MallocEntryMessage >*
      mutable_malloc_entry_arr();
  private:
  const ::MallocEntryMessage& _internal_malloc_entry_arr(int index) const;
  ::MallocEntryMessage* _internal_add_malloc_entry_arr();
  public:
  const ::MallocEntryMessage& malloc_entry_arr(int index) const;
  ::MallocEntryMessage* add_malloc_entry_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MallocEntryMessage >&
      malloc_entry_arr() const;

  // @@protoc_insertion_point(class_scope:MemLeakMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MallocEntryMessage > malloc_entry_arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MallocEntryMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MallocEntryMessage) */ {
 public:
  inline MallocEntryMessage() : MallocEntryMessage(nullptr) {}
  virtual ~MallocEntryMessage();
  explicit constexpr MallocEntryMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MallocEntryMessage(const MallocEntryMessage& from);
  MallocEntryMessage(MallocEntryMessage&& from) noexcept
    : MallocEntryMessage() {
    *this = ::std::move(from);
  }

  inline MallocEntryMessage& operator=(const MallocEntryMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MallocEntryMessage& operator=(MallocEntryMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MallocEntryMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MallocEntryMessage* internal_default_instance() {
    return reinterpret_cast<const MallocEntryMessage*>(
               &_MallocEntryMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MallocEntryMessage& a, MallocEntryMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MallocEntryMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MallocEntryMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MallocEntryMessage* New() const final {
    return CreateMaybeMessage<MallocEntryMessage>(nullptr);
  }

  MallocEntryMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MallocEntryMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MallocEntryMessage& from);
  void MergeFrom(const MallocEntryMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MallocEntryMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MallocEntryMessage";
  }
  protected:
  explicit MallocEntryMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_message_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kPidFieldNumber = 2,
    kSizeFieldNumber = 3,
    kAddrFieldNumber = 4,
    kCallerFieldNumber = 5,
  };
  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 pid = 2;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int64 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 addr = 4;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::int64 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_addr() const;
  void _internal_set_addr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 caller = 5;
  void clear_caller();
  ::PROTOBUF_NAMESPACE_ID::int64 caller() const;
  void set_caller(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_caller() const;
  void _internal_set_caller(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:MallocEntryMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 pid_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 addr_;
  ::PROTOBUF_NAMESPACE_ID::int64 caller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringMessage

// string val = 1;
inline void StringMessage::clear_val() {
  val_.ClearToEmpty();
}
inline const std::string& StringMessage::val() const {
  // @@protoc_insertion_point(field_get:StringMessage.val)
  return _internal_val();
}
inline void StringMessage::set_val(const std::string& value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:StringMessage.val)
}
inline std::string* StringMessage::mutable_val() {
  // @@protoc_insertion_point(field_mutable:StringMessage.val)
  return _internal_mutable_val();
}
inline const std::string& StringMessage::_internal_val() const {
  return val_.Get();
}
inline void StringMessage::_internal_set_val(const std::string& value) {
  
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StringMessage::set_val(std::string&& value) {
  
  val_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StringMessage.val)
}
inline void StringMessage::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:StringMessage.val)
}
inline void StringMessage::set_val(const char* value,
    size_t size) {
  
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StringMessage.val)
}
inline std::string* StringMessage::_internal_mutable_val() {
  
  return val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StringMessage::release_val() {
  // @@protoc_insertion_point(field_release:StringMessage.val)
  return val_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringMessage::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StringMessage.val)
}

// -------------------------------------------------------------------

// IntegerMessage

// int32 val = 1;
inline void IntegerMessage::clear_val() {
  val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegerMessage::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegerMessage::val() const {
  // @@protoc_insertion_point(field_get:IntegerMessage.val)
  return _internal_val();
}
inline void IntegerMessage::_internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  val_ = value;
}
inline void IntegerMessage::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:IntegerMessage.val)
}

// -------------------------------------------------------------------

// LongMessage

// int64 val = 1;
inline void LongMessage::clear_val() {
  val_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LongMessage::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LongMessage::val() const {
  // @@protoc_insertion_point(field_get:LongMessage.val)
  return _internal_val();
}
inline void LongMessage::_internal_set_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  val_ = value;
}
inline void LongMessage::set_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:LongMessage.val)
}

// -------------------------------------------------------------------

// FloatMessage

// float val = 1;
inline void FloatMessage::clear_val() {
  val_ = 0;
}
inline float FloatMessage::_internal_val() const {
  return val_;
}
inline float FloatMessage::val() const {
  // @@protoc_insertion_point(field_get:FloatMessage.val)
  return _internal_val();
}
inline void FloatMessage::_internal_set_val(float value) {
  
  val_ = value;
}
inline void FloatMessage::set_val(float value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:FloatMessage.val)
}

// -------------------------------------------------------------------

// DoubleMessage

// double val = 1;
inline void DoubleMessage::clear_val() {
  val_ = 0;
}
inline double DoubleMessage::_internal_val() const {
  return val_;
}
inline double DoubleMessage::val() const {
  // @@protoc_insertion_point(field_get:DoubleMessage.val)
  return _internal_val();
}
inline void DoubleMessage::_internal_set_val(double value) {
  
  val_ = value;
}
inline void DoubleMessage::set_val(double value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:DoubleMessage.val)
}

// -------------------------------------------------------------------

// StringArrayMessage

// repeated string arr = 1;
inline int StringArrayMessage::_internal_arr_size() const {
  return arr_.size();
}
inline int StringArrayMessage::arr_size() const {
  return _internal_arr_size();
}
inline void StringArrayMessage::clear_arr() {
  arr_.Clear();
}
inline std::string* StringArrayMessage::add_arr() {
  // @@protoc_insertion_point(field_add_mutable:StringArrayMessage.arr)
  return _internal_add_arr();
}
inline const std::string& StringArrayMessage::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline const std::string& StringArrayMessage::arr(int index) const {
  // @@protoc_insertion_point(field_get:StringArrayMessage.arr)
  return _internal_arr(index);
}
inline std::string* StringArrayMessage::mutable_arr(int index) {
  // @@protoc_insertion_point(field_mutable:StringArrayMessage.arr)
  return arr_.Mutable(index);
}
inline void StringArrayMessage::set_arr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:StringArrayMessage.arr)
  arr_.Mutable(index)->assign(value);
}
inline void StringArrayMessage::set_arr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:StringArrayMessage.arr)
  arr_.Mutable(index)->assign(std::move(value));
}
inline void StringArrayMessage::set_arr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StringArrayMessage.arr)
}
inline void StringArrayMessage::set_arr(int index, const char* value, size_t size) {
  arr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StringArrayMessage.arr)
}
inline std::string* StringArrayMessage::_internal_add_arr() {
  return arr_.Add();
}
inline void StringArrayMessage::add_arr(const std::string& value) {
  arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StringArrayMessage.arr)
}
inline void StringArrayMessage::add_arr(std::string&& value) {
  arr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StringArrayMessage.arr)
}
inline void StringArrayMessage::add_arr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StringArrayMessage.arr)
}
inline void StringArrayMessage::add_arr(const char* value, size_t size) {
  arr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StringArrayMessage.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringArrayMessage::arr() const {
  // @@protoc_insertion_point(field_list:StringArrayMessage.arr)
  return arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringArrayMessage::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:StringArrayMessage.arr)
  return &arr_;
}

// -------------------------------------------------------------------

// IntegerArrayMessage

// repeated int32 arr = 1;
inline int IntegerArrayMessage::_internal_arr_size() const {
  return arr_.size();
}
inline int IntegerArrayMessage::arr_size() const {
  return _internal_arr_size();
}
inline void IntegerArrayMessage::clear_arr() {
  arr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegerArrayMessage::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegerArrayMessage::arr(int index) const {
  // @@protoc_insertion_point(field_get:IntegerArrayMessage.arr)
  return _internal_arr(index);
}
inline void IntegerArrayMessage::set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:IntegerArrayMessage.arr)
}
inline void IntegerArrayMessage::_internal_add_arr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  arr_.Add(value);
}
inline void IntegerArrayMessage::add_arr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:IntegerArrayMessage.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntegerArrayMessage::_internal_arr() const {
  return arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntegerArrayMessage::arr() const {
  // @@protoc_insertion_point(field_list:IntegerArrayMessage.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntegerArrayMessage::_internal_mutable_arr() {
  return &arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntegerArrayMessage::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:IntegerArrayMessage.arr)
  return _internal_mutable_arr();
}

// -------------------------------------------------------------------

// LongArrayMessage

// repeated int64 arr = 1;
inline int LongArrayMessage::_internal_arr_size() const {
  return arr_.size();
}
inline int LongArrayMessage::arr_size() const {
  return _internal_arr_size();
}
inline void LongArrayMessage::clear_arr() {
  arr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LongArrayMessage::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LongArrayMessage::arr(int index) const {
  // @@protoc_insertion_point(field_get:LongArrayMessage.arr)
  return _internal_arr(index);
}
inline void LongArrayMessage::set_arr(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:LongArrayMessage.arr)
}
inline void LongArrayMessage::_internal_add_arr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  arr_.Add(value);
}
inline void LongArrayMessage::add_arr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:LongArrayMessage.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LongArrayMessage::_internal_arr() const {
  return arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LongArrayMessage::arr() const {
  // @@protoc_insertion_point(field_list:LongArrayMessage.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LongArrayMessage::_internal_mutable_arr() {
  return &arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LongArrayMessage::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:LongArrayMessage.arr)
  return _internal_mutable_arr();
}

// -------------------------------------------------------------------

// FloatArrayMessage

// repeated float arr = 1;
inline int FloatArrayMessage::_internal_arr_size() const {
  return arr_.size();
}
inline int FloatArrayMessage::arr_size() const {
  return _internal_arr_size();
}
inline void FloatArrayMessage::clear_arr() {
  arr_.Clear();
}
inline float FloatArrayMessage::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline float FloatArrayMessage::arr(int index) const {
  // @@protoc_insertion_point(field_get:FloatArrayMessage.arr)
  return _internal_arr(index);
}
inline void FloatArrayMessage::set_arr(int index, float value) {
  arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:FloatArrayMessage.arr)
}
inline void FloatArrayMessage::_internal_add_arr(float value) {
  arr_.Add(value);
}
inline void FloatArrayMessage::add_arr(float value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:FloatArrayMessage.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArrayMessage::_internal_arr() const {
  return arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArrayMessage::arr() const {
  // @@protoc_insertion_point(field_list:FloatArrayMessage.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArrayMessage::_internal_mutable_arr() {
  return &arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArrayMessage::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:FloatArrayMessage.arr)
  return _internal_mutable_arr();
}

// -------------------------------------------------------------------

// DoubleArrayMessage

// repeated double arr = 1;
inline int DoubleArrayMessage::_internal_arr_size() const {
  return arr_.size();
}
inline int DoubleArrayMessage::arr_size() const {
  return _internal_arr_size();
}
inline void DoubleArrayMessage::clear_arr() {
  arr_.Clear();
}
inline double DoubleArrayMessage::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline double DoubleArrayMessage::arr(int index) const {
  // @@protoc_insertion_point(field_get:DoubleArrayMessage.arr)
  return _internal_arr(index);
}
inline void DoubleArrayMessage::set_arr(int index, double value) {
  arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:DoubleArrayMessage.arr)
}
inline void DoubleArrayMessage::_internal_add_arr(double value) {
  arr_.Add(value);
}
inline void DoubleArrayMessage::add_arr(double value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:DoubleArrayMessage.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleArrayMessage::_internal_arr() const {
  return arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleArrayMessage::arr() const {
  // @@protoc_insertion_point(field_list:DoubleArrayMessage.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleArrayMessage::_internal_mutable_arr() {
  return &arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleArrayMessage::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:DoubleArrayMessage.arr)
  return _internal_mutable_arr();
}

// -------------------------------------------------------------------

// CommandArrayMessage

// repeated .CommandMessage command_arr = 1;
inline int CommandArrayMessage::_internal_command_arr_size() const {
  return command_arr_.size();
}
inline int CommandArrayMessage::command_arr_size() const {
  return _internal_command_arr_size();
}
inline void CommandArrayMessage::clear_command_arr() {
  command_arr_.Clear();
}
inline ::CommandMessage* CommandArrayMessage::mutable_command_arr(int index) {
  // @@protoc_insertion_point(field_mutable:CommandArrayMessage.command_arr)
  return command_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommandMessage >*
CommandArrayMessage::mutable_command_arr() {
  // @@protoc_insertion_point(field_mutable_list:CommandArrayMessage.command_arr)
  return &command_arr_;
}
inline const ::CommandMessage& CommandArrayMessage::_internal_command_arr(int index) const {
  return command_arr_.Get(index);
}
inline const ::CommandMessage& CommandArrayMessage::command_arr(int index) const {
  // @@protoc_insertion_point(field_get:CommandArrayMessage.command_arr)
  return _internal_command_arr(index);
}
inline ::CommandMessage* CommandArrayMessage::_internal_add_command_arr() {
  return command_arr_.Add();
}
inline ::CommandMessage* CommandArrayMessage::add_command_arr() {
  // @@protoc_insertion_point(field_add:CommandArrayMessage.command_arr)
  return _internal_add_command_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CommandMessage >&
CommandArrayMessage::command_arr() const {
  // @@protoc_insertion_point(field_list:CommandArrayMessage.command_arr)
  return command_arr_;
}

// -------------------------------------------------------------------

// CommandMessage

// string addr = 1;
inline void CommandMessage::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& CommandMessage::addr() const {
  // @@protoc_insertion_point(field_get:CommandMessage.addr)
  return _internal_addr();
}
inline void CommandMessage::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:CommandMessage.addr)
}
inline std::string* CommandMessage::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:CommandMessage.addr)
  return _internal_mutable_addr();
}
inline const std::string& CommandMessage::_internal_addr() const {
  return addr_.Get();
}
inline void CommandMessage::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommandMessage::set_addr(std::string&& value) {
  
  addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommandMessage.addr)
}
inline void CommandMessage::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CommandMessage.addr)
}
inline void CommandMessage::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommandMessage.addr)
}
inline std::string* CommandMessage::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandMessage::release_addr() {
  // @@protoc_insertion_point(field_release:CommandMessage.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandMessage::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommandMessage.addr)
}

// string worker_name = 2;
inline void CommandMessage::clear_worker_name() {
  worker_name_.ClearToEmpty();
}
inline const std::string& CommandMessage::worker_name() const {
  // @@protoc_insertion_point(field_get:CommandMessage.worker_name)
  return _internal_worker_name();
}
inline void CommandMessage::set_worker_name(const std::string& value) {
  _internal_set_worker_name(value);
  // @@protoc_insertion_point(field_set:CommandMessage.worker_name)
}
inline std::string* CommandMessage::mutable_worker_name() {
  // @@protoc_insertion_point(field_mutable:CommandMessage.worker_name)
  return _internal_mutable_worker_name();
}
inline const std::string& CommandMessage::_internal_worker_name() const {
  return worker_name_.Get();
}
inline void CommandMessage::_internal_set_worker_name(const std::string& value) {
  
  worker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommandMessage::set_worker_name(std::string&& value) {
  
  worker_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommandMessage.worker_name)
}
inline void CommandMessage::set_worker_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CommandMessage.worker_name)
}
inline void CommandMessage::set_worker_name(const char* value,
    size_t size) {
  
  worker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommandMessage.worker_name)
}
inline std::string* CommandMessage::_internal_mutable_worker_name() {
  
  return worker_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandMessage::release_worker_name() {
  // @@protoc_insertion_point(field_release:CommandMessage.worker_name)
  return worker_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandMessage::set_allocated_worker_name(std::string* worker_name) {
  if (worker_name != nullptr) {
    
  } else {
    
  }
  worker_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommandMessage.worker_name)
}

// string cmd_type = 3;
inline void CommandMessage::clear_cmd_type() {
  cmd_type_.ClearToEmpty();
}
inline const std::string& CommandMessage::cmd_type() const {
  // @@protoc_insertion_point(field_get:CommandMessage.cmd_type)
  return _internal_cmd_type();
}
inline void CommandMessage::set_cmd_type(const std::string& value) {
  _internal_set_cmd_type(value);
  // @@protoc_insertion_point(field_set:CommandMessage.cmd_type)
}
inline std::string* CommandMessage::mutable_cmd_type() {
  // @@protoc_insertion_point(field_mutable:CommandMessage.cmd_type)
  return _internal_mutable_cmd_type();
}
inline const std::string& CommandMessage::_internal_cmd_type() const {
  return cmd_type_.Get();
}
inline void CommandMessage::_internal_set_cmd_type(const std::string& value) {
  
  cmd_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommandMessage::set_cmd_type(std::string&& value) {
  
  cmd_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommandMessage.cmd_type)
}
inline void CommandMessage::set_cmd_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CommandMessage.cmd_type)
}
inline void CommandMessage::set_cmd_type(const char* value,
    size_t size) {
  
  cmd_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommandMessage.cmd_type)
}
inline std::string* CommandMessage::_internal_mutable_cmd_type() {
  
  return cmd_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandMessage::release_cmd_type() {
  // @@protoc_insertion_point(field_release:CommandMessage.cmd_type)
  return cmd_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandMessage::set_allocated_cmd_type(std::string* cmd_type) {
  if (cmd_type != nullptr) {
    
  } else {
    
  }
  cmd_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommandMessage.cmd_type)
}

// -------------------------------------------------------------------

// ServerStatusArrayMessage

// repeated .ServerStatusMessage server_status_arr = 1;
inline int ServerStatusArrayMessage::_internal_server_status_arr_size() const {
  return server_status_arr_.size();
}
inline int ServerStatusArrayMessage::server_status_arr_size() const {
  return _internal_server_status_arr_size();
}
inline void ServerStatusArrayMessage::clear_server_status_arr() {
  server_status_arr_.Clear();
}
inline ::ServerStatusMessage* ServerStatusArrayMessage::mutable_server_status_arr(int index) {
  // @@protoc_insertion_point(field_mutable:ServerStatusArrayMessage.server_status_arr)
  return server_status_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerStatusMessage >*
ServerStatusArrayMessage::mutable_server_status_arr() {
  // @@protoc_insertion_point(field_mutable_list:ServerStatusArrayMessage.server_status_arr)
  return &server_status_arr_;
}
inline const ::ServerStatusMessage& ServerStatusArrayMessage::_internal_server_status_arr(int index) const {
  return server_status_arr_.Get(index);
}
inline const ::ServerStatusMessage& ServerStatusArrayMessage::server_status_arr(int index) const {
  // @@protoc_insertion_point(field_get:ServerStatusArrayMessage.server_status_arr)
  return _internal_server_status_arr(index);
}
inline ::ServerStatusMessage* ServerStatusArrayMessage::_internal_add_server_status_arr() {
  return server_status_arr_.Add();
}
inline ::ServerStatusMessage* ServerStatusArrayMessage::add_server_status_arr() {
  // @@protoc_insertion_point(field_add:ServerStatusArrayMessage.server_status_arr)
  return _internal_add_server_status_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerStatusMessage >&
ServerStatusArrayMessage::server_status_arr() const {
  // @@protoc_insertion_point(field_list:ServerStatusArrayMessage.server_status_arr)
  return server_status_arr_;
}

// -------------------------------------------------------------------

// ServerStatusMessage

// string addr = 1;
inline void ServerStatusMessage::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& ServerStatusMessage::addr() const {
  // @@protoc_insertion_point(field_get:ServerStatusMessage.addr)
  return _internal_addr();
}
inline void ServerStatusMessage::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:ServerStatusMessage.addr)
}
inline std::string* ServerStatusMessage::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:ServerStatusMessage.addr)
  return _internal_mutable_addr();
}
inline const std::string& ServerStatusMessage::_internal_addr() const {
  return addr_.Get();
}
inline void ServerStatusMessage::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerStatusMessage::set_addr(std::string&& value) {
  
  addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServerStatusMessage.addr)
}
inline void ServerStatusMessage::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ServerStatusMessage.addr)
}
inline void ServerStatusMessage::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServerStatusMessage.addr)
}
inline std::string* ServerStatusMessage::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerStatusMessage::release_addr() {
  // @@protoc_insertion_point(field_release:ServerStatusMessage.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerStatusMessage::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServerStatusMessage.addr)
}

// repeated .WorkerStatusMessage worker_status_arr = 2;
inline int ServerStatusMessage::_internal_worker_status_arr_size() const {
  return worker_status_arr_.size();
}
inline int ServerStatusMessage::worker_status_arr_size() const {
  return _internal_worker_status_arr_size();
}
inline void ServerStatusMessage::clear_worker_status_arr() {
  worker_status_arr_.Clear();
}
inline ::WorkerStatusMessage* ServerStatusMessage::mutable_worker_status_arr(int index) {
  // @@protoc_insertion_point(field_mutable:ServerStatusMessage.worker_status_arr)
  return worker_status_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkerStatusMessage >*
ServerStatusMessage::mutable_worker_status_arr() {
  // @@protoc_insertion_point(field_mutable_list:ServerStatusMessage.worker_status_arr)
  return &worker_status_arr_;
}
inline const ::WorkerStatusMessage& ServerStatusMessage::_internal_worker_status_arr(int index) const {
  return worker_status_arr_.Get(index);
}
inline const ::WorkerStatusMessage& ServerStatusMessage::worker_status_arr(int index) const {
  // @@protoc_insertion_point(field_get:ServerStatusMessage.worker_status_arr)
  return _internal_worker_status_arr(index);
}
inline ::WorkerStatusMessage* ServerStatusMessage::_internal_add_worker_status_arr() {
  return worker_status_arr_.Add();
}
inline ::WorkerStatusMessage* ServerStatusMessage::add_worker_status_arr() {
  // @@protoc_insertion_point(field_add:ServerStatusMessage.worker_status_arr)
  return _internal_add_worker_status_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkerStatusMessage >&
ServerStatusMessage::worker_status_arr() const {
  // @@protoc_insertion_point(field_list:ServerStatusMessage.worker_status_arr)
  return worker_status_arr_;
}

// string status = 3;
inline void ServerStatusMessage::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& ServerStatusMessage::status() const {
  // @@protoc_insertion_point(field_get:ServerStatusMessage.status)
  return _internal_status();
}
inline void ServerStatusMessage::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ServerStatusMessage.status)
}
inline std::string* ServerStatusMessage::mutable_status() {
  // @@protoc_insertion_point(field_mutable:ServerStatusMessage.status)
  return _internal_mutable_status();
}
inline const std::string& ServerStatusMessage::_internal_status() const {
  return status_.Get();
}
inline void ServerStatusMessage::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerStatusMessage::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServerStatusMessage.status)
}
inline void ServerStatusMessage::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ServerStatusMessage.status)
}
inline void ServerStatusMessage::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServerStatusMessage.status)
}
inline std::string* ServerStatusMessage::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerStatusMessage::release_status() {
  // @@protoc_insertion_point(field_release:ServerStatusMessage.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerStatusMessage::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServerStatusMessage.status)
}

// -------------------------------------------------------------------

// WorkerStatusMessage

// string worker_name = 1;
inline void WorkerStatusMessage::clear_worker_name() {
  worker_name_.ClearToEmpty();
}
inline const std::string& WorkerStatusMessage::worker_name() const {
  // @@protoc_insertion_point(field_get:WorkerStatusMessage.worker_name)
  return _internal_worker_name();
}
inline void WorkerStatusMessage::set_worker_name(const std::string& value) {
  _internal_set_worker_name(value);
  // @@protoc_insertion_point(field_set:WorkerStatusMessage.worker_name)
}
inline std::string* WorkerStatusMessage::mutable_worker_name() {
  // @@protoc_insertion_point(field_mutable:WorkerStatusMessage.worker_name)
  return _internal_mutable_worker_name();
}
inline const std::string& WorkerStatusMessage::_internal_worker_name() const {
  return worker_name_.Get();
}
inline void WorkerStatusMessage::_internal_set_worker_name(const std::string& value) {
  
  worker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkerStatusMessage::set_worker_name(std::string&& value) {
  
  worker_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WorkerStatusMessage.worker_name)
}
inline void WorkerStatusMessage::set_worker_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WorkerStatusMessage.worker_name)
}
inline void WorkerStatusMessage::set_worker_name(const char* value,
    size_t size) {
  
  worker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WorkerStatusMessage.worker_name)
}
inline std::string* WorkerStatusMessage::_internal_mutable_worker_name() {
  
  return worker_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkerStatusMessage::release_worker_name() {
  // @@protoc_insertion_point(field_release:WorkerStatusMessage.worker_name)
  return worker_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerStatusMessage::set_allocated_worker_name(std::string* worker_name) {
  if (worker_name != nullptr) {
    
  } else {
    
  }
  worker_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WorkerStatusMessage.worker_name)
}

// string status = 2;
inline void WorkerStatusMessage::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& WorkerStatusMessage::status() const {
  // @@protoc_insertion_point(field_get:WorkerStatusMessage.status)
  return _internal_status();
}
inline void WorkerStatusMessage::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:WorkerStatusMessage.status)
}
inline std::string* WorkerStatusMessage::mutable_status() {
  // @@protoc_insertion_point(field_mutable:WorkerStatusMessage.status)
  return _internal_mutable_status();
}
inline const std::string& WorkerStatusMessage::_internal_status() const {
  return status_.Get();
}
inline void WorkerStatusMessage::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkerStatusMessage::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WorkerStatusMessage.status)
}
inline void WorkerStatusMessage::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WorkerStatusMessage.status)
}
inline void WorkerStatusMessage::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WorkerStatusMessage.status)
}
inline std::string* WorkerStatusMessage::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkerStatusMessage::release_status() {
  // @@protoc_insertion_point(field_release:WorkerStatusMessage.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerStatusMessage::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WorkerStatusMessage.status)
}

// repeated .WorkerFutureMessage futures = 3;
inline int WorkerStatusMessage::_internal_futures_size() const {
  return futures_.size();
}
inline int WorkerStatusMessage::futures_size() const {
  return _internal_futures_size();
}
inline void WorkerStatusMessage::clear_futures() {
  futures_.Clear();
}
inline ::WorkerFutureMessage* WorkerStatusMessage::mutable_futures(int index) {
  // @@protoc_insertion_point(field_mutable:WorkerStatusMessage.futures)
  return futures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkerFutureMessage >*
WorkerStatusMessage::mutable_futures() {
  // @@protoc_insertion_point(field_mutable_list:WorkerStatusMessage.futures)
  return &futures_;
}
inline const ::WorkerFutureMessage& WorkerStatusMessage::_internal_futures(int index) const {
  return futures_.Get(index);
}
inline const ::WorkerFutureMessage& WorkerStatusMessage::futures(int index) const {
  // @@protoc_insertion_point(field_get:WorkerStatusMessage.futures)
  return _internal_futures(index);
}
inline ::WorkerFutureMessage* WorkerStatusMessage::_internal_add_futures() {
  return futures_.Add();
}
inline ::WorkerFutureMessage* WorkerStatusMessage::add_futures() {
  // @@protoc_insertion_point(field_add:WorkerStatusMessage.futures)
  return _internal_add_futures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WorkerFutureMessage >&
WorkerStatusMessage::futures() const {
  // @@protoc_insertion_point(field_list:WorkerStatusMessage.futures)
  return futures_;
}

// -------------------------------------------------------------------

// WorkerFutureMessage

// string label = 1;
inline void WorkerFutureMessage::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& WorkerFutureMessage::label() const {
  // @@protoc_insertion_point(field_get:WorkerFutureMessage.label)
  return _internal_label();
}
inline void WorkerFutureMessage::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:WorkerFutureMessage.label)
}
inline std::string* WorkerFutureMessage::mutable_label() {
  // @@protoc_insertion_point(field_mutable:WorkerFutureMessage.label)
  return _internal_mutable_label();
}
inline const std::string& WorkerFutureMessage::_internal_label() const {
  return label_.Get();
}
inline void WorkerFutureMessage::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkerFutureMessage::set_label(std::string&& value) {
  
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WorkerFutureMessage.label)
}
inline void WorkerFutureMessage::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WorkerFutureMessage.label)
}
inline void WorkerFutureMessage::set_label(const char* value,
    size_t size) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WorkerFutureMessage.label)
}
inline std::string* WorkerFutureMessage::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkerFutureMessage::release_label() {
  // @@protoc_insertion_point(field_release:WorkerFutureMessage.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerFutureMessage::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WorkerFutureMessage.label)
}

// string desc = 2;
inline void WorkerFutureMessage::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& WorkerFutureMessage::desc() const {
  // @@protoc_insertion_point(field_get:WorkerFutureMessage.desc)
  return _internal_desc();
}
inline void WorkerFutureMessage::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:WorkerFutureMessage.desc)
}
inline std::string* WorkerFutureMessage::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:WorkerFutureMessage.desc)
  return _internal_mutable_desc();
}
inline const std::string& WorkerFutureMessage::_internal_desc() const {
  return desc_.Get();
}
inline void WorkerFutureMessage::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkerFutureMessage::set_desc(std::string&& value) {
  
  desc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WorkerFutureMessage.desc)
}
inline void WorkerFutureMessage::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WorkerFutureMessage.desc)
}
inline void WorkerFutureMessage::set_desc(const char* value,
    size_t size) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WorkerFutureMessage.desc)
}
inline std::string* WorkerFutureMessage::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkerFutureMessage::release_desc() {
  // @@protoc_insertion_point(field_release:WorkerFutureMessage.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerFutureMessage::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WorkerFutureMessage.desc)
}

// -------------------------------------------------------------------

// FetchRequestArrayMessage

// repeated .FetchRequestMessage fetch_request_arr = 1;
inline int FetchRequestArrayMessage::_internal_fetch_request_arr_size() const {
  return fetch_request_arr_.size();
}
inline int FetchRequestArrayMessage::fetch_request_arr_size() const {
  return _internal_fetch_request_arr_size();
}
inline void FetchRequestArrayMessage::clear_fetch_request_arr() {
  fetch_request_arr_.Clear();
}
inline ::FetchRequestMessage* FetchRequestArrayMessage::mutable_fetch_request_arr(int index) {
  // @@protoc_insertion_point(field_mutable:FetchRequestArrayMessage.fetch_request_arr)
  return fetch_request_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FetchRequestMessage >*
FetchRequestArrayMessage::mutable_fetch_request_arr() {
  // @@protoc_insertion_point(field_mutable_list:FetchRequestArrayMessage.fetch_request_arr)
  return &fetch_request_arr_;
}
inline const ::FetchRequestMessage& FetchRequestArrayMessage::_internal_fetch_request_arr(int index) const {
  return fetch_request_arr_.Get(index);
}
inline const ::FetchRequestMessage& FetchRequestArrayMessage::fetch_request_arr(int index) const {
  // @@protoc_insertion_point(field_get:FetchRequestArrayMessage.fetch_request_arr)
  return _internal_fetch_request_arr(index);
}
inline ::FetchRequestMessage* FetchRequestArrayMessage::_internal_add_fetch_request_arr() {
  return fetch_request_arr_.Add();
}
inline ::FetchRequestMessage* FetchRequestArrayMessage::add_fetch_request_arr() {
  // @@protoc_insertion_point(field_add:FetchRequestArrayMessage.fetch_request_arr)
  return _internal_add_fetch_request_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FetchRequestMessage >&
FetchRequestArrayMessage::fetch_request_arr() const {
  // @@protoc_insertion_point(field_list:FetchRequestArrayMessage.fetch_request_arr)
  return fetch_request_arr_;
}

// -------------------------------------------------------------------

// FetchRequestMessage

// string addr = 1;
inline void FetchRequestMessage::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& FetchRequestMessage::addr() const {
  // @@protoc_insertion_point(field_get:FetchRequestMessage.addr)
  return _internal_addr();
}
inline void FetchRequestMessage::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:FetchRequestMessage.addr)
}
inline std::string* FetchRequestMessage::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:FetchRequestMessage.addr)
  return _internal_mutable_addr();
}
inline const std::string& FetchRequestMessage::_internal_addr() const {
  return addr_.Get();
}
inline void FetchRequestMessage::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchRequestMessage::set_addr(std::string&& value) {
  
  addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FetchRequestMessage.addr)
}
inline void FetchRequestMessage::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FetchRequestMessage.addr)
}
inline void FetchRequestMessage::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FetchRequestMessage.addr)
}
inline std::string* FetchRequestMessage::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchRequestMessage::release_addr() {
  // @@protoc_insertion_point(field_release:FetchRequestMessage.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchRequestMessage::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FetchRequestMessage.addr)
}

// repeated string future_arr = 2;
inline int FetchRequestMessage::_internal_future_arr_size() const {
  return future_arr_.size();
}
inline int FetchRequestMessage::future_arr_size() const {
  return _internal_future_arr_size();
}
inline void FetchRequestMessage::clear_future_arr() {
  future_arr_.Clear();
}
inline std::string* FetchRequestMessage::add_future_arr() {
  // @@protoc_insertion_point(field_add_mutable:FetchRequestMessage.future_arr)
  return _internal_add_future_arr();
}
inline const std::string& FetchRequestMessage::_internal_future_arr(int index) const {
  return future_arr_.Get(index);
}
inline const std::string& FetchRequestMessage::future_arr(int index) const {
  // @@protoc_insertion_point(field_get:FetchRequestMessage.future_arr)
  return _internal_future_arr(index);
}
inline std::string* FetchRequestMessage::mutable_future_arr(int index) {
  // @@protoc_insertion_point(field_mutable:FetchRequestMessage.future_arr)
  return future_arr_.Mutable(index);
}
inline void FetchRequestMessage::set_future_arr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:FetchRequestMessage.future_arr)
  future_arr_.Mutable(index)->assign(value);
}
inline void FetchRequestMessage::set_future_arr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:FetchRequestMessage.future_arr)
  future_arr_.Mutable(index)->assign(std::move(value));
}
inline void FetchRequestMessage::set_future_arr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  future_arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FetchRequestMessage.future_arr)
}
inline void FetchRequestMessage::set_future_arr(int index, const char* value, size_t size) {
  future_arr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FetchRequestMessage.future_arr)
}
inline std::string* FetchRequestMessage::_internal_add_future_arr() {
  return future_arr_.Add();
}
inline void FetchRequestMessage::add_future_arr(const std::string& value) {
  future_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FetchRequestMessage.future_arr)
}
inline void FetchRequestMessage::add_future_arr(std::string&& value) {
  future_arr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FetchRequestMessage.future_arr)
}
inline void FetchRequestMessage::add_future_arr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  future_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FetchRequestMessage.future_arr)
}
inline void FetchRequestMessage::add_future_arr(const char* value, size_t size) {
  future_arr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FetchRequestMessage.future_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FetchRequestMessage::future_arr() const {
  // @@protoc_insertion_point(field_list:FetchRequestMessage.future_arr)
  return future_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FetchRequestMessage::mutable_future_arr() {
  // @@protoc_insertion_point(field_mutable_list:FetchRequestMessage.future_arr)
  return &future_arr_;
}

// repeated string param_arr = 3;
inline int FetchRequestMessage::_internal_param_arr_size() const {
  return param_arr_.size();
}
inline int FetchRequestMessage::param_arr_size() const {
  return _internal_param_arr_size();
}
inline void FetchRequestMessage::clear_param_arr() {
  param_arr_.Clear();
}
inline std::string* FetchRequestMessage::add_param_arr() {
  // @@protoc_insertion_point(field_add_mutable:FetchRequestMessage.param_arr)
  return _internal_add_param_arr();
}
inline const std::string& FetchRequestMessage::_internal_param_arr(int index) const {
  return param_arr_.Get(index);
}
inline const std::string& FetchRequestMessage::param_arr(int index) const {
  // @@protoc_insertion_point(field_get:FetchRequestMessage.param_arr)
  return _internal_param_arr(index);
}
inline std::string* FetchRequestMessage::mutable_param_arr(int index) {
  // @@protoc_insertion_point(field_mutable:FetchRequestMessage.param_arr)
  return param_arr_.Mutable(index);
}
inline void FetchRequestMessage::set_param_arr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:FetchRequestMessage.param_arr)
  param_arr_.Mutable(index)->assign(value);
}
inline void FetchRequestMessage::set_param_arr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:FetchRequestMessage.param_arr)
  param_arr_.Mutable(index)->assign(std::move(value));
}
inline void FetchRequestMessage::set_param_arr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  param_arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FetchRequestMessage.param_arr)
}
inline void FetchRequestMessage::set_param_arr(int index, const char* value, size_t size) {
  param_arr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FetchRequestMessage.param_arr)
}
inline std::string* FetchRequestMessage::_internal_add_param_arr() {
  return param_arr_.Add();
}
inline void FetchRequestMessage::add_param_arr(const std::string& value) {
  param_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FetchRequestMessage.param_arr)
}
inline void FetchRequestMessage::add_param_arr(std::string&& value) {
  param_arr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FetchRequestMessage.param_arr)
}
inline void FetchRequestMessage::add_param_arr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  param_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FetchRequestMessage.param_arr)
}
inline void FetchRequestMessage::add_param_arr(const char* value, size_t size) {
  param_arr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FetchRequestMessage.param_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FetchRequestMessage::param_arr() const {
  // @@protoc_insertion_point(field_list:FetchRequestMessage.param_arr)
  return param_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FetchRequestMessage::mutable_param_arr() {
  // @@protoc_insertion_point(field_mutable_list:FetchRequestMessage.param_arr)
  return &param_arr_;
}

// -------------------------------------------------------------------

// FetchReplyArrayMessage

// repeated .FetchReplyMessage fetch_reply_arr = 1;
inline int FetchReplyArrayMessage::_internal_fetch_reply_arr_size() const {
  return fetch_reply_arr_.size();
}
inline int FetchReplyArrayMessage::fetch_reply_arr_size() const {
  return _internal_fetch_reply_arr_size();
}
inline void FetchReplyArrayMessage::clear_fetch_reply_arr() {
  fetch_reply_arr_.Clear();
}
inline ::FetchReplyMessage* FetchReplyArrayMessage::mutable_fetch_reply_arr(int index) {
  // @@protoc_insertion_point(field_mutable:FetchReplyArrayMessage.fetch_reply_arr)
  return fetch_reply_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FetchReplyMessage >*
FetchReplyArrayMessage::mutable_fetch_reply_arr() {
  // @@protoc_insertion_point(field_mutable_list:FetchReplyArrayMessage.fetch_reply_arr)
  return &fetch_reply_arr_;
}
inline const ::FetchReplyMessage& FetchReplyArrayMessage::_internal_fetch_reply_arr(int index) const {
  return fetch_reply_arr_.Get(index);
}
inline const ::FetchReplyMessage& FetchReplyArrayMessage::fetch_reply_arr(int index) const {
  // @@protoc_insertion_point(field_get:FetchReplyArrayMessage.fetch_reply_arr)
  return _internal_fetch_reply_arr(index);
}
inline ::FetchReplyMessage* FetchReplyArrayMessage::_internal_add_fetch_reply_arr() {
  return fetch_reply_arr_.Add();
}
inline ::FetchReplyMessage* FetchReplyArrayMessage::add_fetch_reply_arr() {
  // @@protoc_insertion_point(field_add:FetchReplyArrayMessage.fetch_reply_arr)
  return _internal_add_fetch_reply_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FetchReplyMessage >&
FetchReplyArrayMessage::fetch_reply_arr() const {
  // @@protoc_insertion_point(field_list:FetchReplyArrayMessage.fetch_reply_arr)
  return fetch_reply_arr_;
}

// -------------------------------------------------------------------

// FetchReplyMessage

// string addr = 1;
inline void FetchReplyMessage::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& FetchReplyMessage::addr() const {
  // @@protoc_insertion_point(field_get:FetchReplyMessage.addr)
  return _internal_addr();
}
inline void FetchReplyMessage::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:FetchReplyMessage.addr)
}
inline std::string* FetchReplyMessage::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:FetchReplyMessage.addr)
  return _internal_mutable_addr();
}
inline const std::string& FetchReplyMessage::_internal_addr() const {
  return addr_.Get();
}
inline void FetchReplyMessage::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FetchReplyMessage::set_addr(std::string&& value) {
  
  addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FetchReplyMessage.addr)
}
inline void FetchReplyMessage::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FetchReplyMessage.addr)
}
inline void FetchReplyMessage::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FetchReplyMessage.addr)
}
inline std::string* FetchReplyMessage::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FetchReplyMessage::release_addr() {
  // @@protoc_insertion_point(field_release:FetchReplyMessage.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchReplyMessage::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FetchReplyMessage.addr)
}

// .CpuMessage cpu_message = 2;
inline bool FetchReplyMessage::_internal_has_cpu_message() const {
  return this != internal_default_instance() && cpu_message_ != nullptr;
}
inline bool FetchReplyMessage::has_cpu_message() const {
  return _internal_has_cpu_message();
}
inline void FetchReplyMessage::clear_cpu_message() {
  if (GetArena() == nullptr && cpu_message_ != nullptr) {
    delete cpu_message_;
  }
  cpu_message_ = nullptr;
}
inline const ::CpuMessage& FetchReplyMessage::_internal_cpu_message() const {
  const ::CpuMessage* p = cpu_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::CpuMessage&>(
      ::_CpuMessage_default_instance_);
}
inline const ::CpuMessage& FetchReplyMessage::cpu_message() const {
  // @@protoc_insertion_point(field_get:FetchReplyMessage.cpu_message)
  return _internal_cpu_message();
}
inline void FetchReplyMessage::unsafe_arena_set_allocated_cpu_message(
    ::CpuMessage* cpu_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_message_);
  }
  cpu_message_ = cpu_message;
  if (cpu_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FetchReplyMessage.cpu_message)
}
inline ::CpuMessage* FetchReplyMessage::release_cpu_message() {
  
  ::CpuMessage* temp = cpu_message_;
  cpu_message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CpuMessage* FetchReplyMessage::unsafe_arena_release_cpu_message() {
  // @@protoc_insertion_point(field_release:FetchReplyMessage.cpu_message)
  
  ::CpuMessage* temp = cpu_message_;
  cpu_message_ = nullptr;
  return temp;
}
inline ::CpuMessage* FetchReplyMessage::_internal_mutable_cpu_message() {
  
  if (cpu_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::CpuMessage>(GetArena());
    cpu_message_ = p;
  }
  return cpu_message_;
}
inline ::CpuMessage* FetchReplyMessage::mutable_cpu_message() {
  // @@protoc_insertion_point(field_mutable:FetchReplyMessage.cpu_message)
  return _internal_mutable_cpu_message();
}
inline void FetchReplyMessage::set_allocated_cpu_message(::CpuMessage* cpu_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cpu_message_;
  }
  if (cpu_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cpu_message);
    if (message_arena != submessage_arena) {
      cpu_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_message, submessage_arena);
    }
    
  } else {
    
  }
  cpu_message_ = cpu_message;
  // @@protoc_insertion_point(field_set_allocated:FetchReplyMessage.cpu_message)
}

// .MemUsageMessage mem_usage_message = 3;
inline bool FetchReplyMessage::_internal_has_mem_usage_message() const {
  return this != internal_default_instance() && mem_usage_message_ != nullptr;
}
inline bool FetchReplyMessage::has_mem_usage_message() const {
  return _internal_has_mem_usage_message();
}
inline void FetchReplyMessage::clear_mem_usage_message() {
  if (GetArena() == nullptr && mem_usage_message_ != nullptr) {
    delete mem_usage_message_;
  }
  mem_usage_message_ = nullptr;
}
inline const ::MemUsageMessage& FetchReplyMessage::_internal_mem_usage_message() const {
  const ::MemUsageMessage* p = mem_usage_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::MemUsageMessage&>(
      ::_MemUsageMessage_default_instance_);
}
inline const ::MemUsageMessage& FetchReplyMessage::mem_usage_message() const {
  // @@protoc_insertion_point(field_get:FetchReplyMessage.mem_usage_message)
  return _internal_mem_usage_message();
}
inline void FetchReplyMessage::unsafe_arena_set_allocated_mem_usage_message(
    ::MemUsageMessage* mem_usage_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mem_usage_message_);
  }
  mem_usage_message_ = mem_usage_message;
  if (mem_usage_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FetchReplyMessage.mem_usage_message)
}
inline ::MemUsageMessage* FetchReplyMessage::release_mem_usage_message() {
  
  ::MemUsageMessage* temp = mem_usage_message_;
  mem_usage_message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MemUsageMessage* FetchReplyMessage::unsafe_arena_release_mem_usage_message() {
  // @@protoc_insertion_point(field_release:FetchReplyMessage.mem_usage_message)
  
  ::MemUsageMessage* temp = mem_usage_message_;
  mem_usage_message_ = nullptr;
  return temp;
}
inline ::MemUsageMessage* FetchReplyMessage::_internal_mutable_mem_usage_message() {
  
  if (mem_usage_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::MemUsageMessage>(GetArena());
    mem_usage_message_ = p;
  }
  return mem_usage_message_;
}
inline ::MemUsageMessage* FetchReplyMessage::mutable_mem_usage_message() {
  // @@protoc_insertion_point(field_mutable:FetchReplyMessage.mem_usage_message)
  return _internal_mutable_mem_usage_message();
}
inline void FetchReplyMessage::set_allocated_mem_usage_message(::MemUsageMessage* mem_usage_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mem_usage_message_;
  }
  if (mem_usage_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mem_usage_message);
    if (message_arena != submessage_arena) {
      mem_usage_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem_usage_message, submessage_arena);
    }
    
  } else {
    
  }
  mem_usage_message_ = mem_usage_message;
  // @@protoc_insertion_point(field_set_allocated:FetchReplyMessage.mem_usage_message)
}

// .MemoryMonitorMessage memory_monitor_message = 4;
inline bool FetchReplyMessage::_internal_has_memory_monitor_message() const {
  return this != internal_default_instance() && memory_monitor_message_ != nullptr;
}
inline bool FetchReplyMessage::has_memory_monitor_message() const {
  return _internal_has_memory_monitor_message();
}
inline void FetchReplyMessage::clear_memory_monitor_message() {
  if (GetArena() == nullptr && memory_monitor_message_ != nullptr) {
    delete memory_monitor_message_;
  }
  memory_monitor_message_ = nullptr;
}
inline const ::MemoryMonitorMessage& FetchReplyMessage::_internal_memory_monitor_message() const {
  const ::MemoryMonitorMessage* p = memory_monitor_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::MemoryMonitorMessage&>(
      ::_MemoryMonitorMessage_default_instance_);
}
inline const ::MemoryMonitorMessage& FetchReplyMessage::memory_monitor_message() const {
  // @@protoc_insertion_point(field_get:FetchReplyMessage.memory_monitor_message)
  return _internal_memory_monitor_message();
}
inline void FetchReplyMessage::unsafe_arena_set_allocated_memory_monitor_message(
    ::MemoryMonitorMessage* memory_monitor_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memory_monitor_message_);
  }
  memory_monitor_message_ = memory_monitor_message;
  if (memory_monitor_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FetchReplyMessage.memory_monitor_message)
}
inline ::MemoryMonitorMessage* FetchReplyMessage::release_memory_monitor_message() {
  
  ::MemoryMonitorMessage* temp = memory_monitor_message_;
  memory_monitor_message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MemoryMonitorMessage* FetchReplyMessage::unsafe_arena_release_memory_monitor_message() {
  // @@protoc_insertion_point(field_release:FetchReplyMessage.memory_monitor_message)
  
  ::MemoryMonitorMessage* temp = memory_monitor_message_;
  memory_monitor_message_ = nullptr;
  return temp;
}
inline ::MemoryMonitorMessage* FetchReplyMessage::_internal_mutable_memory_monitor_message() {
  
  if (memory_monitor_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::MemoryMonitorMessage>(GetArena());
    memory_monitor_message_ = p;
  }
  return memory_monitor_message_;
}
inline ::MemoryMonitorMessage* FetchReplyMessage::mutable_memory_monitor_message() {
  // @@protoc_insertion_point(field_mutable:FetchReplyMessage.memory_monitor_message)
  return _internal_mutable_memory_monitor_message();
}
inline void FetchReplyMessage::set_allocated_memory_monitor_message(::MemoryMonitorMessage* memory_monitor_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memory_monitor_message_;
  }
  if (memory_monitor_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memory_monitor_message);
    if (message_arena != submessage_arena) {
      memory_monitor_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_monitor_message, submessage_arena);
    }
    
  } else {
    
  }
  memory_monitor_message_ = memory_monitor_message;
  // @@protoc_insertion_point(field_set_allocated:FetchReplyMessage.memory_monitor_message)
}

// .MemLeakMessage mem_leak_message = 5;
inline bool FetchReplyMessage::_internal_has_mem_leak_message() const {
  return this != internal_default_instance() && mem_leak_message_ != nullptr;
}
inline bool FetchReplyMessage::has_mem_leak_message() const {
  return _internal_has_mem_leak_message();
}
inline void FetchReplyMessage::clear_mem_leak_message() {
  if (GetArena() == nullptr && mem_leak_message_ != nullptr) {
    delete mem_leak_message_;
  }
  mem_leak_message_ = nullptr;
}
inline const ::MemLeakMessage& FetchReplyMessage::_internal_mem_leak_message() const {
  const ::MemLeakMessage* p = mem_leak_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::MemLeakMessage&>(
      ::_MemLeakMessage_default_instance_);
}
inline const ::MemLeakMessage& FetchReplyMessage::mem_leak_message() const {
  // @@protoc_insertion_point(field_get:FetchReplyMessage.mem_leak_message)
  return _internal_mem_leak_message();
}
inline void FetchReplyMessage::unsafe_arena_set_allocated_mem_leak_message(
    ::MemLeakMessage* mem_leak_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mem_leak_message_);
  }
  mem_leak_message_ = mem_leak_message;
  if (mem_leak_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FetchReplyMessage.mem_leak_message)
}
inline ::MemLeakMessage* FetchReplyMessage::release_mem_leak_message() {
  
  ::MemLeakMessage* temp = mem_leak_message_;
  mem_leak_message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MemLeakMessage* FetchReplyMessage::unsafe_arena_release_mem_leak_message() {
  // @@protoc_insertion_point(field_release:FetchReplyMessage.mem_leak_message)
  
  ::MemLeakMessage* temp = mem_leak_message_;
  mem_leak_message_ = nullptr;
  return temp;
}
inline ::MemLeakMessage* FetchReplyMessage::_internal_mutable_mem_leak_message() {
  
  if (mem_leak_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::MemLeakMessage>(GetArena());
    mem_leak_message_ = p;
  }
  return mem_leak_message_;
}
inline ::MemLeakMessage* FetchReplyMessage::mutable_mem_leak_message() {
  // @@protoc_insertion_point(field_mutable:FetchReplyMessage.mem_leak_message)
  return _internal_mutable_mem_leak_message();
}
inline void FetchReplyMessage::set_allocated_mem_leak_message(::MemLeakMessage* mem_leak_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mem_leak_message_;
  }
  if (mem_leak_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mem_leak_message);
    if (message_arena != submessage_arena) {
      mem_leak_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem_leak_message, submessage_arena);
    }
    
  } else {
    
  }
  mem_leak_message_ = mem_leak_message;
  // @@protoc_insertion_point(field_set_allocated:FetchReplyMessage.mem_leak_message)
}

// repeated string infos = 6;
inline int FetchReplyMessage::_internal_infos_size() const {
  return infos_.size();
}
inline int FetchReplyMessage::infos_size() const {
  return _internal_infos_size();
}
inline void FetchReplyMessage::clear_infos() {
  infos_.Clear();
}
inline std::string* FetchReplyMessage::add_infos() {
  // @@protoc_insertion_point(field_add_mutable:FetchReplyMessage.infos)
  return _internal_add_infos();
}
inline const std::string& FetchReplyMessage::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const std::string& FetchReplyMessage::infos(int index) const {
  // @@protoc_insertion_point(field_get:FetchReplyMessage.infos)
  return _internal_infos(index);
}
inline std::string* FetchReplyMessage::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:FetchReplyMessage.infos)
  return infos_.Mutable(index);
}
inline void FetchReplyMessage::set_infos(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:FetchReplyMessage.infos)
  infos_.Mutable(index)->assign(value);
}
inline void FetchReplyMessage::set_infos(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:FetchReplyMessage.infos)
  infos_.Mutable(index)->assign(std::move(value));
}
inline void FetchReplyMessage::set_infos(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  infos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FetchReplyMessage.infos)
}
inline void FetchReplyMessage::set_infos(int index, const char* value, size_t size) {
  infos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FetchReplyMessage.infos)
}
inline std::string* FetchReplyMessage::_internal_add_infos() {
  return infos_.Add();
}
inline void FetchReplyMessage::add_infos(const std::string& value) {
  infos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FetchReplyMessage.infos)
}
inline void FetchReplyMessage::add_infos(std::string&& value) {
  infos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FetchReplyMessage.infos)
}
inline void FetchReplyMessage::add_infos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  infos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FetchReplyMessage.infos)
}
inline void FetchReplyMessage::add_infos(const char* value, size_t size) {
  infos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FetchReplyMessage.infos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FetchReplyMessage::infos() const {
  // @@protoc_insertion_point(field_list:FetchReplyMessage.infos)
  return infos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FetchReplyMessage::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:FetchReplyMessage.infos)
  return &infos_;
}

// -------------------------------------------------------------------

// CpuMessage

// int32 core_num = 1;
inline void CpuMessage::clear_core_num() {
  core_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuMessage::_internal_core_num() const {
  return core_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuMessage::core_num() const {
  // @@protoc_insertion_point(field_get:CpuMessage.core_num)
  return _internal_core_num();
}
inline void CpuMessage::_internal_set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  core_num_ = value;
}
inline void CpuMessage::set_core_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_core_num(value);
  // @@protoc_insertion_point(field_set:CpuMessage.core_num)
}

// repeated float usage_arr = 2;
inline int CpuMessage::_internal_usage_arr_size() const {
  return usage_arr_.size();
}
inline int CpuMessage::usage_arr_size() const {
  return _internal_usage_arr_size();
}
inline void CpuMessage::clear_usage_arr() {
  usage_arr_.Clear();
}
inline float CpuMessage::_internal_usage_arr(int index) const {
  return usage_arr_.Get(index);
}
inline float CpuMessage::usage_arr(int index) const {
  // @@protoc_insertion_point(field_get:CpuMessage.usage_arr)
  return _internal_usage_arr(index);
}
inline void CpuMessage::set_usage_arr(int index, float value) {
  usage_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:CpuMessage.usage_arr)
}
inline void CpuMessage::_internal_add_usage_arr(float value) {
  usage_arr_.Add(value);
}
inline void CpuMessage::add_usage_arr(float value) {
  _internal_add_usage_arr(value);
  // @@protoc_insertion_point(field_add:CpuMessage.usage_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CpuMessage::_internal_usage_arr() const {
  return usage_arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CpuMessage::usage_arr() const {
  // @@protoc_insertion_point(field_list:CpuMessage.usage_arr)
  return _internal_usage_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CpuMessage::_internal_mutable_usage_arr() {
  return &usage_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CpuMessage::mutable_usage_arr() {
  // @@protoc_insertion_point(field_mutable_list:CpuMessage.usage_arr)
  return _internal_mutable_usage_arr();
}

// -------------------------------------------------------------------

// MemUsageMessage

// int64 total = 1;
inline void MemUsageMessage::clear_total() {
  total_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::total() const {
  // @@protoc_insertion_point(field_get:MemUsageMessage.total)
  return _internal_total();
}
inline void MemUsageMessage::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_ = value;
}
inline void MemUsageMessage::set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:MemUsageMessage.total)
}

// int64 available = 2;
inline void MemUsageMessage::clear_available() {
  available_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::_internal_available() const {
  return available_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::available() const {
  // @@protoc_insertion_point(field_get:MemUsageMessage.available)
  return _internal_available();
}
inline void MemUsageMessage::_internal_set_available(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  available_ = value;
}
inline void MemUsageMessage::set_available(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:MemUsageMessage.available)
}

// int64 used = 3;
inline void MemUsageMessage::clear_used() {
  used_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::_internal_used() const {
  return used_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::used() const {
  // @@protoc_insertion_point(field_get:MemUsageMessage.used)
  return _internal_used();
}
inline void MemUsageMessage::_internal_set_used(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  used_ = value;
}
inline void MemUsageMessage::set_used(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:MemUsageMessage.used)
}

// int64 free = 4;
inline void MemUsageMessage::clear_free() {
  free_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::_internal_free() const {
  return free_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::free() const {
  // @@protoc_insertion_point(field_get:MemUsageMessage.free)
  return _internal_free();
}
inline void MemUsageMessage::_internal_set_free(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  free_ = value;
}
inline void MemUsageMessage::set_free(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_free(value);
  // @@protoc_insertion_point(field_set:MemUsageMessage.free)
}

// int64 active = 5;
inline void MemUsageMessage::clear_active() {
  active_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::_internal_active() const {
  return active_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::active() const {
  // @@protoc_insertion_point(field_get:MemUsageMessage.active)
  return _internal_active();
}
inline void MemUsageMessage::_internal_set_active(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  active_ = value;
}
inline void MemUsageMessage::set_active(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:MemUsageMessage.active)
}

// int64 inactive = 6;
inline void MemUsageMessage::clear_inactive() {
  inactive_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::_internal_inactive() const {
  return inactive_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::inactive() const {
  // @@protoc_insertion_point(field_get:MemUsageMessage.inactive)
  return _internal_inactive();
}
inline void MemUsageMessage::_internal_set_inactive(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  inactive_ = value;
}
inline void MemUsageMessage::set_inactive(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_inactive(value);
  // @@protoc_insertion_point(field_set:MemUsageMessage.inactive)
}

// int64 buffers = 7;
inline void MemUsageMessage::clear_buffers() {
  buffers_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::_internal_buffers() const {
  return buffers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::buffers() const {
  // @@protoc_insertion_point(field_get:MemUsageMessage.buffers)
  return _internal_buffers();
}
inline void MemUsageMessage::_internal_set_buffers(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  buffers_ = value;
}
inline void MemUsageMessage::set_buffers(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_buffers(value);
  // @@protoc_insertion_point(field_set:MemUsageMessage.buffers)
}

// int64 cached = 8;
inline void MemUsageMessage::clear_cached() {
  cached_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::_internal_cached() const {
  return cached_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::cached() const {
  // @@protoc_insertion_point(field_get:MemUsageMessage.cached)
  return _internal_cached();
}
inline void MemUsageMessage::_internal_set_cached(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cached_ = value;
}
inline void MemUsageMessage::set_cached(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cached(value);
  // @@protoc_insertion_point(field_set:MemUsageMessage.cached)
}

// int64 wired = 9;
inline void MemUsageMessage::clear_wired() {
  wired_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::_internal_wired() const {
  return wired_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemUsageMessage::wired() const {
  // @@protoc_insertion_point(field_get:MemUsageMessage.wired)
  return _internal_wired();
}
inline void MemUsageMessage::_internal_set_wired(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  wired_ = value;
}
inline void MemUsageMessage::set_wired(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_wired(value);
  // @@protoc_insertion_point(field_set:MemUsageMessage.wired)
}

// -------------------------------------------------------------------

// MemoryMonitorMessage

// repeated .ProcessMessage process_arr = 1;
inline int MemoryMonitorMessage::_internal_process_arr_size() const {
  return process_arr_.size();
}
inline int MemoryMonitorMessage::process_arr_size() const {
  return _internal_process_arr_size();
}
inline void MemoryMonitorMessage::clear_process_arr() {
  process_arr_.Clear();
}
inline ::ProcessMessage* MemoryMonitorMessage::mutable_process_arr(int index) {
  // @@protoc_insertion_point(field_mutable:MemoryMonitorMessage.process_arr)
  return process_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProcessMessage >*
MemoryMonitorMessage::mutable_process_arr() {
  // @@protoc_insertion_point(field_mutable_list:MemoryMonitorMessage.process_arr)
  return &process_arr_;
}
inline const ::ProcessMessage& MemoryMonitorMessage::_internal_process_arr(int index) const {
  return process_arr_.Get(index);
}
inline const ::ProcessMessage& MemoryMonitorMessage::process_arr(int index) const {
  // @@protoc_insertion_point(field_get:MemoryMonitorMessage.process_arr)
  return _internal_process_arr(index);
}
inline ::ProcessMessage* MemoryMonitorMessage::_internal_add_process_arr() {
  return process_arr_.Add();
}
inline ::ProcessMessage* MemoryMonitorMessage::add_process_arr() {
  // @@protoc_insertion_point(field_add:MemoryMonitorMessage.process_arr)
  return _internal_add_process_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProcessMessage >&
MemoryMonitorMessage::process_arr() const {
  // @@protoc_insertion_point(field_list:MemoryMonitorMessage.process_arr)
  return process_arr_;
}

// -------------------------------------------------------------------

// ProcessMessage

// uint32 pid = 1;
inline void ProcessMessage::clear_pid() {
  pid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessMessage::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessMessage::pid() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.pid)
  return _internal_pid();
}
inline void ProcessMessage::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pid_ = value;
}
inline void ProcessMessage::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.pid)
}

// uint32 ppid = 2;
inline void ProcessMessage::clear_ppid() {
  ppid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessMessage::_internal_ppid() const {
  return ppid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessMessage::ppid() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.ppid)
  return _internal_ppid();
}
inline void ProcessMessage::_internal_set_ppid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ppid_ = value;
}
inline void ProcessMessage::set_ppid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ppid(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.ppid)
}

// string name = 3;
inline void ProcessMessage::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ProcessMessage::name() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.name)
  return _internal_name();
}
inline void ProcessMessage::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.name)
}
inline std::string* ProcessMessage::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ProcessMessage.name)
  return _internal_mutable_name();
}
inline const std::string& ProcessMessage::_internal_name() const {
  return name_.Get();
}
inline void ProcessMessage::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProcessMessage::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProcessMessage.name)
}
inline void ProcessMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProcessMessage.name)
}
inline void ProcessMessage::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProcessMessage.name)
}
inline std::string* ProcessMessage::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProcessMessage::release_name() {
  // @@protoc_insertion_point(field_release:ProcessMessage.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProcessMessage.name)
}

// string cmdline = 4;
inline void ProcessMessage::clear_cmdline() {
  cmdline_.ClearToEmpty();
}
inline const std::string& ProcessMessage::cmdline() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.cmdline)
  return _internal_cmdline();
}
inline void ProcessMessage::set_cmdline(const std::string& value) {
  _internal_set_cmdline(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.cmdline)
}
inline std::string* ProcessMessage::mutable_cmdline() {
  // @@protoc_insertion_point(field_mutable:ProcessMessage.cmdline)
  return _internal_mutable_cmdline();
}
inline const std::string& ProcessMessage::_internal_cmdline() const {
  return cmdline_.Get();
}
inline void ProcessMessage::_internal_set_cmdline(const std::string& value) {
  
  cmdline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProcessMessage::set_cmdline(std::string&& value) {
  
  cmdline_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProcessMessage.cmdline)
}
inline void ProcessMessage::set_cmdline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmdline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProcessMessage.cmdline)
}
inline void ProcessMessage::set_cmdline(const char* value,
    size_t size) {
  
  cmdline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProcessMessage.cmdline)
}
inline std::string* ProcessMessage::_internal_mutable_cmdline() {
  
  return cmdline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProcessMessage::release_cmdline() {
  // @@protoc_insertion_point(field_release:ProcessMessage.cmdline)
  return cmdline_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessMessage::set_allocated_cmdline(std::string* cmdline) {
  if (cmdline != nullptr) {
    
  } else {
    
  }
  cmdline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmdline,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProcessMessage.cmdline)
}

// double create_time = 5;
inline void ProcessMessage::clear_create_time() {
  create_time_ = 0;
}
inline double ProcessMessage::_internal_create_time() const {
  return create_time_;
}
inline double ProcessMessage::create_time() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.create_time)
  return _internal_create_time();
}
inline void ProcessMessage::_internal_set_create_time(double value) {
  
  create_time_ = value;
}
inline void ProcessMessage::set_create_time(double value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.create_time)
}

// uint32 uid = 6;
inline void ProcessMessage::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessMessage::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessMessage::uid() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.uid)
  return _internal_uid();
}
inline void ProcessMessage::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void ProcessMessage::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.uid)
}

// uint32 gid = 7;
inline void ProcessMessage::clear_gid() {
  gid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessMessage::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProcessMessage::gid() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.gid)
  return _internal_gid();
}
inline void ProcessMessage::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gid_ = value;
}
inline void ProcessMessage::set_gid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.gid)
}

// string username = 8;
inline void ProcessMessage::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& ProcessMessage::username() const {
  // @@protoc_insertion_point(field_get:ProcessMessage.username)
  return _internal_username();
}
inline void ProcessMessage::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:ProcessMessage.username)
}
inline std::string* ProcessMessage::mutable_username() {
  // @@protoc_insertion_point(field_mutable:ProcessMessage.username)
  return _internal_mutable_username();
}
inline const std::string& ProcessMessage::_internal_username() const {
  return username_.Get();
}
inline void ProcessMessage::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProcessMessage::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProcessMessage.username)
}
inline void ProcessMessage::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProcessMessage.username)
}
inline void ProcessMessage::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProcessMessage.username)
}
inline std::string* ProcessMessage::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProcessMessage::release_username() {
  // @@protoc_insertion_point(field_release:ProcessMessage.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProcessMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProcessMessage.username)
}

// repeated .ThreadMessage threads = 9;
inline int ProcessMessage::_internal_threads_size() const {
  return threads_.size();
}
inline int ProcessMessage::threads_size() const {
  return _internal_threads_size();
}
inline void ProcessMessage::clear_threads() {
  threads_.Clear();
}
inline ::ThreadMessage* ProcessMessage::mutable_threads(int index) {
  // @@protoc_insertion_point(field_mutable:ProcessMessage.threads)
  return threads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ThreadMessage >*
ProcessMessage::mutable_threads() {
  // @@protoc_insertion_point(field_mutable_list:ProcessMessage.threads)
  return &threads_;
}
inline const ::ThreadMessage& ProcessMessage::_internal_threads(int index) const {
  return threads_.Get(index);
}
inline const ::ThreadMessage& ProcessMessage::threads(int index) const {
  // @@protoc_insertion_point(field_get:ProcessMessage.threads)
  return _internal_threads(index);
}
inline ::ThreadMessage* ProcessMessage::_internal_add_threads() {
  return threads_.Add();
}
inline ::ThreadMessage* ProcessMessage::add_threads() {
  // @@protoc_insertion_point(field_add:ProcessMessage.threads)
  return _internal_add_threads();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ThreadMessage >&
ProcessMessage::threads() const {
  // @@protoc_insertion_point(field_list:ProcessMessage.threads)
  return threads_;
}

// -------------------------------------------------------------------

// ThreadMessage

// int64 tid = 1;
inline void ThreadMessage::clear_tid() {
  tid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::_internal_tid() const {
  return tid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::tid() const {
  // @@protoc_insertion_point(field_get:ThreadMessage.tid)
  return _internal_tid();
}
inline void ThreadMessage::_internal_set_tid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tid_ = value;
}
inline void ThreadMessage::set_tid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:ThreadMessage.tid)
}

// int64 rss = 2;
inline void ThreadMessage::clear_rss() {
  rss_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::_internal_rss() const {
  return rss_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::rss() const {
  // @@protoc_insertion_point(field_get:ThreadMessage.rss)
  return _internal_rss();
}
inline void ThreadMessage::_internal_set_rss(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rss_ = value;
}
inline void ThreadMessage::set_rss(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rss(value);
  // @@protoc_insertion_point(field_set:ThreadMessage.rss)
}

// int64 vms = 3;
inline void ThreadMessage::clear_vms() {
  vms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::_internal_vms() const {
  return vms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::vms() const {
  // @@protoc_insertion_point(field_get:ThreadMessage.vms)
  return _internal_vms();
}
inline void ThreadMessage::_internal_set_vms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  vms_ = value;
}
inline void ThreadMessage::set_vms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_vms(value);
  // @@protoc_insertion_point(field_set:ThreadMessage.vms)
}

// int64 shared = 4;
inline void ThreadMessage::clear_shared() {
  shared_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::_internal_shared() const {
  return shared_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::shared() const {
  // @@protoc_insertion_point(field_get:ThreadMessage.shared)
  return _internal_shared();
}
inline void ThreadMessage::_internal_set_shared(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  shared_ = value;
}
inline void ThreadMessage::set_shared(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_shared(value);
  // @@protoc_insertion_point(field_set:ThreadMessage.shared)
}

// int64 text = 5;
inline void ThreadMessage::clear_text() {
  text_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::_internal_text() const {
  return text_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::text() const {
  // @@protoc_insertion_point(field_get:ThreadMessage.text)
  return _internal_text();
}
inline void ThreadMessage::_internal_set_text(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  text_ = value;
}
inline void ThreadMessage::set_text(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:ThreadMessage.text)
}

// int64 lib = 6;
inline void ThreadMessage::clear_lib() {
  lib_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::_internal_lib() const {
  return lib_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::lib() const {
  // @@protoc_insertion_point(field_get:ThreadMessage.lib)
  return _internal_lib();
}
inline void ThreadMessage::_internal_set_lib(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lib_ = value;
}
inline void ThreadMessage::set_lib(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lib(value);
  // @@protoc_insertion_point(field_set:ThreadMessage.lib)
}

// int64 data = 7;
inline void ThreadMessage::clear_data() {
  data_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::_internal_data() const {
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::data() const {
  // @@protoc_insertion_point(field_get:ThreadMessage.data)
  return _internal_data();
}
inline void ThreadMessage::_internal_set_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_ = value;
}
inline void ThreadMessage::set_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ThreadMessage.data)
}

// int64 dirty = 8;
inline void ThreadMessage::clear_dirty() {
  dirty_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::_internal_dirty() const {
  return dirty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadMessage::dirty() const {
  // @@protoc_insertion_point(field_get:ThreadMessage.dirty)
  return _internal_dirty();
}
inline void ThreadMessage::_internal_set_dirty(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dirty_ = value;
}
inline void ThreadMessage::set_dirty(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dirty(value);
  // @@protoc_insertion_point(field_set:ThreadMessage.dirty)
}

// -------------------------------------------------------------------

// MemLeakMessage

// repeated .MallocEntryMessage malloc_entry_arr = 1;
inline int MemLeakMessage::_internal_malloc_entry_arr_size() const {
  return malloc_entry_arr_.size();
}
inline int MemLeakMessage::malloc_entry_arr_size() const {
  return _internal_malloc_entry_arr_size();
}
inline void MemLeakMessage::clear_malloc_entry_arr() {
  malloc_entry_arr_.Clear();
}
inline ::MallocEntryMessage* MemLeakMessage::mutable_malloc_entry_arr(int index) {
  // @@protoc_insertion_point(field_mutable:MemLeakMessage.malloc_entry_arr)
  return malloc_entry_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MallocEntryMessage >*
MemLeakMessage::mutable_malloc_entry_arr() {
  // @@protoc_insertion_point(field_mutable_list:MemLeakMessage.malloc_entry_arr)
  return &malloc_entry_arr_;
}
inline const ::MallocEntryMessage& MemLeakMessage::_internal_malloc_entry_arr(int index) const {
  return malloc_entry_arr_.Get(index);
}
inline const ::MallocEntryMessage& MemLeakMessage::malloc_entry_arr(int index) const {
  // @@protoc_insertion_point(field_get:MemLeakMessage.malloc_entry_arr)
  return _internal_malloc_entry_arr(index);
}
inline ::MallocEntryMessage* MemLeakMessage::_internal_add_malloc_entry_arr() {
  return malloc_entry_arr_.Add();
}
inline ::MallocEntryMessage* MemLeakMessage::add_malloc_entry_arr() {
  // @@protoc_insertion_point(field_add:MemLeakMessage.malloc_entry_arr)
  return _internal_add_malloc_entry_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MallocEntryMessage >&
MemLeakMessage::malloc_entry_arr() const {
  // @@protoc_insertion_point(field_list:MemLeakMessage.malloc_entry_arr)
  return malloc_entry_arr_;
}

// -------------------------------------------------------------------

// MallocEntryMessage

// int64 time = 1;
inline void MallocEntryMessage::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MallocEntryMessage::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MallocEntryMessage::time() const {
  // @@protoc_insertion_point(field_get:MallocEntryMessage.time)
  return _internal_time();
}
inline void MallocEntryMessage::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void MallocEntryMessage::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:MallocEntryMessage.time)
}

// int64 pid = 2;
inline void MallocEntryMessage::clear_pid() {
  pid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MallocEntryMessage::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MallocEntryMessage::pid() const {
  // @@protoc_insertion_point(field_get:MallocEntryMessage.pid)
  return _internal_pid();
}
inline void MallocEntryMessage::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pid_ = value;
}
inline void MallocEntryMessage::set_pid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:MallocEntryMessage.pid)
}

// int64 size = 3;
inline void MallocEntryMessage::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MallocEntryMessage::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MallocEntryMessage::size() const {
  // @@protoc_insertion_point(field_get:MallocEntryMessage.size)
  return _internal_size();
}
inline void MallocEntryMessage::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void MallocEntryMessage::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:MallocEntryMessage.size)
}

// int64 addr = 4;
inline void MallocEntryMessage::clear_addr() {
  addr_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MallocEntryMessage::_internal_addr() const {
  return addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MallocEntryMessage::addr() const {
  // @@protoc_insertion_point(field_get:MallocEntryMessage.addr)
  return _internal_addr();
}
inline void MallocEntryMessage::_internal_set_addr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  addr_ = value;
}
inline void MallocEntryMessage::set_addr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:MallocEntryMessage.addr)
}

// int64 caller = 5;
inline void MallocEntryMessage::clear_caller() {
  caller_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MallocEntryMessage::_internal_caller() const {
  return caller_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MallocEntryMessage::caller() const {
  // @@protoc_insertion_point(field_get:MallocEntryMessage.caller)
  return _internal_caller();
}
inline void MallocEntryMessage::_internal_set_caller(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  caller_ = value;
}
inline void MallocEntryMessage::set_caller(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_caller(value);
  // @@protoc_insertion_point(field_set:MallocEntryMessage.caller)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
