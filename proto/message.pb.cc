// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr StringMessage::StringMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StringMessageDefaultTypeInternal {
  constexpr StringMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringMessageDefaultTypeInternal() {}
  union {
    StringMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringMessageDefaultTypeInternal _StringMessage_default_instance_;
constexpr IntegerMessage::IntegerMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_(0){}
struct IntegerMessageDefaultTypeInternal {
  constexpr IntegerMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntegerMessageDefaultTypeInternal() {}
  union {
    IntegerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntegerMessageDefaultTypeInternal _IntegerMessage_default_instance_;
constexpr LongMessage::LongMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_(PROTOBUF_LONGLONG(0)){}
struct LongMessageDefaultTypeInternal {
  constexpr LongMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LongMessageDefaultTypeInternal() {}
  union {
    LongMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LongMessageDefaultTypeInternal _LongMessage_default_instance_;
constexpr FloatMessage::FloatMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_(0){}
struct FloatMessageDefaultTypeInternal {
  constexpr FloatMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatMessageDefaultTypeInternal() {}
  union {
    FloatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatMessageDefaultTypeInternal _FloatMessage_default_instance_;
constexpr DoubleMessage::DoubleMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_(0){}
struct DoubleMessageDefaultTypeInternal {
  constexpr DoubleMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoubleMessageDefaultTypeInternal() {}
  union {
    DoubleMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoubleMessageDefaultTypeInternal _DoubleMessage_default_instance_;
constexpr StringArrayMessage::StringArrayMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arr_(){}
struct StringArrayMessageDefaultTypeInternal {
  constexpr StringArrayMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringArrayMessageDefaultTypeInternal() {}
  union {
    StringArrayMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringArrayMessageDefaultTypeInternal _StringArrayMessage_default_instance_;
constexpr IntegerArrayMessage::IntegerArrayMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arr_()
  , _arr_cached_byte_size_(){}
struct IntegerArrayMessageDefaultTypeInternal {
  constexpr IntegerArrayMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntegerArrayMessageDefaultTypeInternal() {}
  union {
    IntegerArrayMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntegerArrayMessageDefaultTypeInternal _IntegerArrayMessage_default_instance_;
constexpr LongArrayMessage::LongArrayMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arr_()
  , _arr_cached_byte_size_(){}
struct LongArrayMessageDefaultTypeInternal {
  constexpr LongArrayMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LongArrayMessageDefaultTypeInternal() {}
  union {
    LongArrayMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LongArrayMessageDefaultTypeInternal _LongArrayMessage_default_instance_;
constexpr FloatArrayMessage::FloatArrayMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arr_()
  , _arr_cached_byte_size_(){}
struct FloatArrayMessageDefaultTypeInternal {
  constexpr FloatArrayMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatArrayMessageDefaultTypeInternal() {}
  union {
    FloatArrayMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatArrayMessageDefaultTypeInternal _FloatArrayMessage_default_instance_;
constexpr DoubleArrayMessage::DoubleArrayMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arr_()
  , _arr_cached_byte_size_(){}
struct DoubleArrayMessageDefaultTypeInternal {
  constexpr DoubleArrayMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoubleArrayMessageDefaultTypeInternal() {}
  union {
    DoubleArrayMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoubleArrayMessageDefaultTypeInternal _DoubleArrayMessage_default_instance_;
constexpr CommandArrayMessage::CommandArrayMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_arr_(){}
struct CommandArrayMessageDefaultTypeInternal {
  constexpr CommandArrayMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandArrayMessageDefaultTypeInternal() {}
  union {
    CommandArrayMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandArrayMessageDefaultTypeInternal _CommandArrayMessage_default_instance_;
constexpr CommandMessage::CommandMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , worker_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cmd_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CommandMessageDefaultTypeInternal {
  constexpr CommandMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMessageDefaultTypeInternal() {}
  union {
    CommandMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMessageDefaultTypeInternal _CommandMessage_default_instance_;
constexpr ServerStatusMessage::ServerStatusMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worker_status_arr_()
  , addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ServerStatusMessageDefaultTypeInternal {
  constexpr ServerStatusMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerStatusMessageDefaultTypeInternal() {}
  union {
    ServerStatusMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerStatusMessageDefaultTypeInternal _ServerStatusMessage_default_instance_;
constexpr WorkerStatusMessage::WorkerStatusMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : futures_()
  , worker_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WorkerStatusMessageDefaultTypeInternal {
  constexpr WorkerStatusMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkerStatusMessageDefaultTypeInternal() {}
  union {
    WorkerStatusMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkerStatusMessageDefaultTypeInternal _WorkerStatusMessage_default_instance_;
constexpr WorkerFutureMessage::WorkerFutureMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WorkerFutureMessageDefaultTypeInternal {
  constexpr WorkerFutureMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkerFutureMessageDefaultTypeInternal() {}
  union {
    WorkerFutureMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkerFutureMessageDefaultTypeInternal _WorkerFutureMessage_default_instance_;
constexpr FetchRequestMessage::FetchRequestMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_arr_()
  , param_arr_(){}
struct FetchRequestMessageDefaultTypeInternal {
  constexpr FetchRequestMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchRequestMessageDefaultTypeInternal() {}
  union {
    FetchRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchRequestMessageDefaultTypeInternal _FetchRequestMessage_default_instance_;
constexpr FetchReplyMessage::FetchReplyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpu_message_(nullptr)
  , mem_usage_message_(nullptr)
  , memory_monitor_message_(nullptr){}
struct FetchReplyMessageDefaultTypeInternal {
  constexpr FetchReplyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchReplyMessageDefaultTypeInternal() {}
  union {
    FetchReplyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchReplyMessageDefaultTypeInternal _FetchReplyMessage_default_instance_;
constexpr ServerStatusArrayMessage::ServerStatusArrayMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_status_arr_(){}
struct ServerStatusArrayMessageDefaultTypeInternal {
  constexpr ServerStatusArrayMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerStatusArrayMessageDefaultTypeInternal() {}
  union {
    ServerStatusArrayMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerStatusArrayMessageDefaultTypeInternal _ServerStatusArrayMessage_default_instance_;
constexpr FetchReplyArrayMessage::FetchReplyArrayMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fetch_reply_arr_(){}
struct FetchReplyArrayMessageDefaultTypeInternal {
  constexpr FetchReplyArrayMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FetchReplyArrayMessageDefaultTypeInternal() {}
  union {
    FetchReplyArrayMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FetchReplyArrayMessageDefaultTypeInternal _FetchReplyArrayMessage_default_instance_;
constexpr CpuMessage::CpuMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : usage_arr_()
  , _usage_arr_cached_byte_size_()
  , core_num_(0){}
struct CpuMessageDefaultTypeInternal {
  constexpr CpuMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CpuMessageDefaultTypeInternal() {}
  union {
    CpuMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CpuMessageDefaultTypeInternal _CpuMessage_default_instance_;
constexpr MemUsageMessage::MemUsageMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_(PROTOBUF_LONGLONG(0))
  , available_(PROTOBUF_LONGLONG(0))
  , used_(PROTOBUF_LONGLONG(0))
  , free_(PROTOBUF_LONGLONG(0))
  , active_(PROTOBUF_LONGLONG(0))
  , inactive_(PROTOBUF_LONGLONG(0))
  , buffers_(PROTOBUF_LONGLONG(0))
  , cached_(PROTOBUF_LONGLONG(0))
  , wired_(PROTOBUF_LONGLONG(0)){}
struct MemUsageMessageDefaultTypeInternal {
  constexpr MemUsageMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemUsageMessageDefaultTypeInternal() {}
  union {
    MemUsageMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemUsageMessageDefaultTypeInternal _MemUsageMessage_default_instance_;
constexpr MemoryMonitorMessage::MemoryMonitorMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : process_arr_(){}
struct MemoryMonitorMessageDefaultTypeInternal {
  constexpr MemoryMonitorMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemoryMonitorMessageDefaultTypeInternal() {}
  union {
    MemoryMonitorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemoryMonitorMessageDefaultTypeInternal _MemoryMonitorMessage_default_instance_;
constexpr ProcessMessage::ProcessMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : threads_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cmdline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pid_(0u)
  , ppid_(0u)
  , create_time_(0)
  , uid_(0u)
  , gid_(0u){}
struct ProcessMessageDefaultTypeInternal {
  constexpr ProcessMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessMessageDefaultTypeInternal() {}
  union {
    ProcessMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessMessageDefaultTypeInternal _ProcessMessage_default_instance_;
constexpr ThreadMessage::ThreadMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tid_(PROTOBUF_LONGLONG(0))
  , rss_(PROTOBUF_LONGLONG(0))
  , vms_(PROTOBUF_LONGLONG(0))
  , shared_(PROTOBUF_LONGLONG(0))
  , text_(PROTOBUF_LONGLONG(0))
  , lib_(PROTOBUF_LONGLONG(0))
  , data_(PROTOBUF_LONGLONG(0))
  , dirty_(PROTOBUF_LONGLONG(0)){}
struct ThreadMessageDefaultTypeInternal {
  constexpr ThreadMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThreadMessageDefaultTypeInternal() {}
  union {
    ThreadMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThreadMessageDefaultTypeInternal _ThreadMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StringMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StringMessage, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntegerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IntegerMessage, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LongMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LongMessage, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FloatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FloatMessage, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DoubleMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DoubleMessage, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StringArrayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StringArrayMessage, arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntegerArrayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IntegerArrayMessage, arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LongArrayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LongArrayMessage, arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FloatArrayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FloatArrayMessage, arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DoubleArrayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DoubleArrayMessage, arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommandArrayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommandArrayMessage, command_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommandMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommandMessage, addr_),
  PROTOBUF_FIELD_OFFSET(::CommandMessage, worker_name_),
  PROTOBUF_FIELD_OFFSET(::CommandMessage, cmd_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerStatusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerStatusMessage, addr_),
  PROTOBUF_FIELD_OFFSET(::ServerStatusMessage, worker_status_arr_),
  PROTOBUF_FIELD_OFFSET(::ServerStatusMessage, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorkerStatusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorkerStatusMessage, worker_name_),
  PROTOBUF_FIELD_OFFSET(::WorkerStatusMessage, status_),
  PROTOBUF_FIELD_OFFSET(::WorkerStatusMessage, futures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorkerFutureMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorkerFutureMessage, label_),
  PROTOBUF_FIELD_OFFSET(::WorkerFutureMessage, desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FetchRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FetchRequestMessage, request_arr_),
  PROTOBUF_FIELD_OFFSET(::FetchRequestMessage, param_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FetchReplyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FetchReplyMessage, addr_),
  PROTOBUF_FIELD_OFFSET(::FetchReplyMessage, cpu_message_),
  PROTOBUF_FIELD_OFFSET(::FetchReplyMessage, mem_usage_message_),
  PROTOBUF_FIELD_OFFSET(::FetchReplyMessage, memory_monitor_message_),
  PROTOBUF_FIELD_OFFSET(::FetchReplyMessage, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerStatusArrayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerStatusArrayMessage, server_status_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FetchReplyArrayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FetchReplyArrayMessage, fetch_reply_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CpuMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CpuMessage, core_num_),
  PROTOBUF_FIELD_OFFSET(::CpuMessage, usage_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MemUsageMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MemUsageMessage, total_),
  PROTOBUF_FIELD_OFFSET(::MemUsageMessage, available_),
  PROTOBUF_FIELD_OFFSET(::MemUsageMessage, used_),
  PROTOBUF_FIELD_OFFSET(::MemUsageMessage, free_),
  PROTOBUF_FIELD_OFFSET(::MemUsageMessage, active_),
  PROTOBUF_FIELD_OFFSET(::MemUsageMessage, inactive_),
  PROTOBUF_FIELD_OFFSET(::MemUsageMessage, buffers_),
  PROTOBUF_FIELD_OFFSET(::MemUsageMessage, cached_),
  PROTOBUF_FIELD_OFFSET(::MemUsageMessage, wired_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MemoryMonitorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MemoryMonitorMessage, process_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, pid_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, ppid_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, name_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, cmdline_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, create_time_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, uid_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, gid_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, username_),
  PROTOBUF_FIELD_OFFSET(::ProcessMessage, threads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ThreadMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ThreadMessage, tid_),
  PROTOBUF_FIELD_OFFSET(::ThreadMessage, rss_),
  PROTOBUF_FIELD_OFFSET(::ThreadMessage, vms_),
  PROTOBUF_FIELD_OFFSET(::ThreadMessage, shared_),
  PROTOBUF_FIELD_OFFSET(::ThreadMessage, text_),
  PROTOBUF_FIELD_OFFSET(::ThreadMessage, lib_),
  PROTOBUF_FIELD_OFFSET(::ThreadMessage, data_),
  PROTOBUF_FIELD_OFFSET(::ThreadMessage, dirty_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::StringMessage)},
  { 6, -1, sizeof(::IntegerMessage)},
  { 12, -1, sizeof(::LongMessage)},
  { 18, -1, sizeof(::FloatMessage)},
  { 24, -1, sizeof(::DoubleMessage)},
  { 30, -1, sizeof(::StringArrayMessage)},
  { 36, -1, sizeof(::IntegerArrayMessage)},
  { 42, -1, sizeof(::LongArrayMessage)},
  { 48, -1, sizeof(::FloatArrayMessage)},
  { 54, -1, sizeof(::DoubleArrayMessage)},
  { 60, -1, sizeof(::CommandArrayMessage)},
  { 66, -1, sizeof(::CommandMessage)},
  { 74, -1, sizeof(::ServerStatusMessage)},
  { 82, -1, sizeof(::WorkerStatusMessage)},
  { 90, -1, sizeof(::WorkerFutureMessage)},
  { 97, -1, sizeof(::FetchRequestMessage)},
  { 104, -1, sizeof(::FetchReplyMessage)},
  { 114, -1, sizeof(::ServerStatusArrayMessage)},
  { 120, -1, sizeof(::FetchReplyArrayMessage)},
  { 126, -1, sizeof(::CpuMessage)},
  { 133, -1, sizeof(::MemUsageMessage)},
  { 147, -1, sizeof(::MemoryMonitorMessage)},
  { 153, -1, sizeof(::ProcessMessage)},
  { 167, -1, sizeof(::ThreadMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StringMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IntegerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LongMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FloatMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DoubleMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StringArrayMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IntegerArrayMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LongArrayMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FloatArrayMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DoubleArrayMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CommandArrayMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CommandMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerStatusMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorkerStatusMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorkerFutureMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FetchRequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FetchReplyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerStatusArrayMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FetchReplyArrayMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CpuMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MemUsageMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MemoryMonitorMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcessMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ThreadMessage_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\"\034\n\rStringMessage\022\013\n\003val\030"
  "\001 \001(\t\"\035\n\016IntegerMessage\022\013\n\003val\030\001 \001(\005\"\032\n\013"
  "LongMessage\022\013\n\003val\030\001 \001(\003\"\033\n\014FloatMessage"
  "\022\013\n\003val\030\001 \001(\002\"\034\n\rDoubleMessage\022\013\n\003val\030\001 "
  "\001(\001\"!\n\022StringArrayMessage\022\013\n\003arr\030\001 \003(\t\"\""
  "\n\023IntegerArrayMessage\022\013\n\003arr\030\001 \003(\005\"\037\n\020Lo"
  "ngArrayMessage\022\013\n\003arr\030\001 \003(\003\" \n\021FloatArra"
  "yMessage\022\013\n\003arr\030\001 \003(\002\"!\n\022DoubleArrayMess"
  "age\022\013\n\003arr\030\001 \003(\001\";\n\023CommandArrayMessage\022"
  "$\n\013command_arr\030\001 \003(\0132\017.CommandMessage\"E\n"
  "\016CommandMessage\022\014\n\004addr\030\001 \001(\t\022\023\n\013worker_"
  "name\030\002 \001(\t\022\020\n\010cmd_type\030\003 \001(\t\"d\n\023ServerSt"
  "atusMessage\022\014\n\004addr\030\001 \001(\t\022/\n\021worker_stat"
  "us_arr\030\002 \003(\0132\024.WorkerStatusMessage\022\016\n\006st"
  "atus\030\003 \001(\t\"a\n\023WorkerStatusMessage\022\023\n\013wor"
  "ker_name\030\001 \001(\t\022\016\n\006status\030\002 \001(\t\022%\n\007future"
  "s\030\003 \003(\0132\024.WorkerFutureMessage\"2\n\023WorkerF"
  "utureMessage\022\r\n\005label\030\001 \001(\t\022\014\n\004desc\030\002 \001("
  "\t\"=\n\023FetchRequestMessage\022\023\n\013request_arr\030"
  "\001 \003(\t\022\021\n\tparam_arr\030\002 \003(\t\"\266\001\n\021FetchReplyM"
  "essage\022\014\n\004addr\030\001 \001(\t\022 \n\013cpu_message\030\002 \001("
  "\0132\013.CpuMessage\022+\n\021mem_usage_message\030\003 \001("
  "\0132\020.MemUsageMessage\0225\n\026memory_monitor_me"
  "ssage\030\004 \001(\0132\025.MemoryMonitorMessage\022\r\n\005in"
  "fos\030\005 \003(\t\"K\n\030ServerStatusArrayMessage\022/\n"
  "\021server_status_arr\030\001 \003(\0132\024.ServerStatusM"
  "essage\"E\n\026FetchReplyArrayMessage\022+\n\017fetc"
  "h_reply_arr\030\001 \003(\0132\022.FetchReplyMessage\"1\n"
  "\nCpuMessage\022\020\n\010core_num\030\001 \001(\005\022\021\n\tusage_a"
  "rr\030\002 \003(\002\"\241\001\n\017MemUsageMessage\022\r\n\005total\030\001 "
  "\001(\003\022\021\n\tavailable\030\002 \001(\003\022\014\n\004used\030\003 \001(\003\022\014\n\004"
  "free\030\004 \001(\003\022\016\n\006active\030\005 \001(\003\022\020\n\010inactive\030\006"
  " \001(\003\022\017\n\007buffers\030\007 \001(\003\022\016\n\006cached\030\010 \001(\003\022\r\n"
  "\005wired\030\t \001(\003\"<\n\024MemoryMonitorMessage\022$\n\013"
  "process_arr\030\001 \003(\0132\017.ProcessMessage\"\254\001\n\016P"
  "rocessMessage\022\013\n\003pid\030\001 \001(\r\022\014\n\004ppid\030\002 \001(\r"
  "\022\014\n\004name\030\003 \001(\t\022\017\n\007cmdline\030\004 \001(\t\022\023\n\013creat"
  "e_time\030\005 \001(\001\022\013\n\003uid\030\006 \001(\r\022\013\n\003gid\030\007 \001(\r\022\020"
  "\n\010username\030\010 \001(\t\022\037\n\007threads\030\t \003(\0132\016.Thre"
  "adMessage\"~\n\rThreadMessage\022\013\n\003tid\030\001 \001(\003\022"
  "\013\n\003rss\030\002 \001(\003\022\013\n\003vms\030\003 \001(\003\022\016\n\006shared\030\004 \001("
  "\003\022\014\n\004text\030\005 \001(\003\022\013\n\003lib\030\006 \001(\003\022\014\n\004data\030\007 \001"
  "(\003\022\r\n\005dirty\030\010 \001(\003B\031\n\027grp.dtop.dtopjava.p"
  "rotob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, 1732, descriptor_table_protodef_message_2eproto, "message.proto", 
  &descriptor_table_message_2eproto_once, nullptr, 0, 24,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_message_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return descriptor_table_message_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);

// ===================================================================

class StringMessage::_Internal {
 public:
};

StringMessage::StringMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StringMessage)
}
StringMessage::StringMessage(const StringMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_val().empty()) {
    val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:StringMessage)
}

void StringMessage::SharedCtor() {
val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringMessage::~StringMessage() {
  // @@protoc_insertion_point(destructor:StringMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StringMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringMessage::ArenaDtor(void* object) {
  StringMessage* _this = reinterpret_cast< StringMessage* >(object);
  (void)_this;
}
void StringMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StringMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StringMessage.val"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StringMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string val = 1;
  if (this->val().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_val().data(), static_cast<int>(this->_internal_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StringMessage.val");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StringMessage)
  return target;
}

size_t StringMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StringMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string val = 1;
  if (this->val().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StringMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StringMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StringMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StringMessage)
    MergeFrom(*source);
  }
}

void StringMessage::MergeFrom(const StringMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StringMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.val().size() > 0) {
    _internal_set_val(from._internal_val());
  }
}

void StringMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StringMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringMessage::CopyFrom(const StringMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StringMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringMessage::IsInitialized() const {
  return true;
}

void StringMessage::InternalSwap(StringMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  val_.Swap(&other->val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntegerMessage::_Internal {
 public:
};

IntegerMessage::IntegerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IntegerMessage)
}
IntegerMessage::IntegerMessage(const IntegerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:IntegerMessage)
}

void IntegerMessage::SharedCtor() {
val_ = 0;
}

IntegerMessage::~IntegerMessage() {
  // @@protoc_insertion_point(destructor:IntegerMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntegerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntegerMessage::ArenaDtor(void* object) {
  IntegerMessage* _this = reinterpret_cast< IntegerMessage* >(object);
  (void)_this;
}
void IntegerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntegerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntegerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:IntegerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntegerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntegerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 val = 1;
  if (this->val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntegerMessage)
  return target;
}

size_t IntegerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntegerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 val = 1;
  if (this->val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IntegerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntegerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IntegerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IntegerMessage)
    MergeFrom(*source);
  }
}

void IntegerMessage::MergeFrom(const IntegerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntegerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.val() != 0) {
    _internal_set_val(from._internal_val());
  }
}

void IntegerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IntegerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerMessage::CopyFrom(const IntegerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntegerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerMessage::IsInitialized() const {
  return true;
}

void IntegerMessage::InternalSwap(IntegerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LongMessage::_Internal {
 public:
};

LongMessage::LongMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LongMessage)
}
LongMessage::LongMessage(const LongMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:LongMessage)
}

void LongMessage::SharedCtor() {
val_ = PROTOBUF_LONGLONG(0);
}

LongMessage::~LongMessage() {
  // @@protoc_insertion_point(destructor:LongMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LongMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LongMessage::ArenaDtor(void* object) {
  LongMessage* _this = reinterpret_cast< LongMessage* >(object);
  (void)_this;
}
void LongMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LongMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LongMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LongMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LongMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LongMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 val = 1;
  if (this->val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LongMessage)
  return target;
}

size_t LongMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LongMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 val = 1;
  if (this->val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LongMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LongMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LongMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LongMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LongMessage)
    MergeFrom(*source);
  }
}

void LongMessage::MergeFrom(const LongMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LongMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.val() != 0) {
    _internal_set_val(from._internal_val());
  }
}

void LongMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LongMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongMessage::CopyFrom(const LongMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LongMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongMessage::IsInitialized() const {
  return true;
}

void LongMessage::InternalSwap(LongMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LongMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FloatMessage::_Internal {
 public:
};

FloatMessage::FloatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FloatMessage)
}
FloatMessage::FloatMessage(const FloatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:FloatMessage)
}

void FloatMessage::SharedCtor() {
val_ = 0;
}

FloatMessage::~FloatMessage() {
  // @@protoc_insertion_point(destructor:FloatMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FloatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FloatMessage::ArenaDtor(void* object) {
  FloatMessage* _this = reinterpret_cast< FloatMessage* >(object);
  (void)_this;
}
void FloatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:FloatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FloatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FloatMessage)
  return target;
}

size_t FloatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FloatMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FloatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FloatMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FloatMessage)
    MergeFrom(*source);
  }
}

void FloatMessage::MergeFrom(const FloatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FloatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.val() <= 0 && from.val() >= 0)) {
    _internal_set_val(from._internal_val());
  }
}

void FloatMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FloatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatMessage::CopyFrom(const FloatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FloatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatMessage::IsInitialized() const {
  return true;
}

void FloatMessage::InternalSwap(FloatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleMessage::_Internal {
 public:
};

DoubleMessage::DoubleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DoubleMessage)
}
DoubleMessage::DoubleMessage(const DoubleMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:DoubleMessage)
}

void DoubleMessage::SharedCtor() {
val_ = 0;
}

DoubleMessage::~DoubleMessage() {
  // @@protoc_insertion_point(destructor:DoubleMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleMessage::ArenaDtor(void* object) {
  DoubleMessage* _this = reinterpret_cast< DoubleMessage* >(object);
  (void)_this;
}
void DoubleMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoubleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DoubleMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DoubleMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DoubleMessage)
  return target;
}

size_t DoubleMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DoubleMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DoubleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DoubleMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DoubleMessage)
    MergeFrom(*source);
  }
}

void DoubleMessage::MergeFrom(const DoubleMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DoubleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.val() <= 0 && from.val() >= 0)) {
    _internal_set_val(from._internal_val());
  }
}

void DoubleMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DoubleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleMessage::CopyFrom(const DoubleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DoubleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleMessage::IsInitialized() const {
  return true;
}

void DoubleMessage::InternalSwap(DoubleMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StringArrayMessage::_Internal {
 public:
};

StringArrayMessage::StringArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StringArrayMessage)
}
StringArrayMessage::StringArrayMessage(const StringArrayMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arr_(from.arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StringArrayMessage)
}

void StringArrayMessage::SharedCtor() {
}

StringArrayMessage::~StringArrayMessage() {
  // @@protoc_insertion_point(destructor:StringArrayMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StringArrayMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StringArrayMessage::ArenaDtor(void* object) {
  StringArrayMessage* _this = reinterpret_cast< StringArrayMessage* >(object);
  (void)_this;
}
void StringArrayMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringArrayMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringArrayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StringArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringArrayMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_arr();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StringArrayMessage.arr"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringArrayMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StringArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string arr = 1;
  for (int i = 0, n = this->_internal_arr_size(); i < n; i++) {
    const auto& s = this->_internal_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StringArrayMessage.arr");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StringArrayMessage)
  return target;
}

size_t StringArrayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StringArrayMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string arr = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(arr_.size());
  for (int i = 0, n = arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      arr_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringArrayMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StringArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StringArrayMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringArrayMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StringArrayMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StringArrayMessage)
    MergeFrom(*source);
  }
}

void StringArrayMessage::MergeFrom(const StringArrayMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StringArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_.MergeFrom(from.arr_);
}

void StringArrayMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StringArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringArrayMessage::CopyFrom(const StringArrayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StringArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringArrayMessage::IsInitialized() const {
  return true;
}

void StringArrayMessage::InternalSwap(StringArrayMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arr_.InternalSwap(&other->arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringArrayMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntegerArrayMessage::_Internal {
 public:
};

IntegerArrayMessage::IntegerArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IntegerArrayMessage)
}
IntegerArrayMessage::IntegerArrayMessage(const IntegerArrayMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arr_(from.arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IntegerArrayMessage)
}

void IntegerArrayMessage::SharedCtor() {
}

IntegerArrayMessage::~IntegerArrayMessage() {
  // @@protoc_insertion_point(destructor:IntegerArrayMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntegerArrayMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntegerArrayMessage::ArenaDtor(void* object) {
  IntegerArrayMessage* _this = reinterpret_cast< IntegerArrayMessage* >(object);
  (void)_this;
}
void IntegerArrayMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntegerArrayMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntegerArrayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:IntegerArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegerArrayMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_arr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_arr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntegerArrayMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntegerArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr = 1;
  {
    int byte_size = _arr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_arr(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntegerArrayMessage)
  return target;
}

size_t IntegerArrayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntegerArrayMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 arr = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->arr_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerArrayMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IntegerArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerArrayMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntegerArrayMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IntegerArrayMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IntegerArrayMessage)
    MergeFrom(*source);
  }
}

void IntegerArrayMessage::MergeFrom(const IntegerArrayMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntegerArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_.MergeFrom(from.arr_);
}

void IntegerArrayMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IntegerArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerArrayMessage::CopyFrom(const IntegerArrayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntegerArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerArrayMessage::IsInitialized() const {
  return true;
}

void IntegerArrayMessage::InternalSwap(IntegerArrayMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arr_.InternalSwap(&other->arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegerArrayMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LongArrayMessage::_Internal {
 public:
};

LongArrayMessage::LongArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LongArrayMessage)
}
LongArrayMessage::LongArrayMessage(const LongArrayMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arr_(from.arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LongArrayMessage)
}

void LongArrayMessage::SharedCtor() {
}

LongArrayMessage::~LongArrayMessage() {
  // @@protoc_insertion_point(destructor:LongArrayMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LongArrayMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LongArrayMessage::ArenaDtor(void* object) {
  LongArrayMessage* _this = reinterpret_cast< LongArrayMessage* >(object);
  (void)_this;
}
void LongArrayMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LongArrayMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LongArrayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LongArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongArrayMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_arr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_arr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LongArrayMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LongArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 arr = 1;
  {
    int byte_size = _arr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_arr(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LongArrayMessage)
  return target;
}

size_t LongArrayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LongArrayMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 arr = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->arr_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongArrayMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LongArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LongArrayMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LongArrayMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LongArrayMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LongArrayMessage)
    MergeFrom(*source);
  }
}

void LongArrayMessage::MergeFrom(const LongArrayMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LongArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_.MergeFrom(from.arr_);
}

void LongArrayMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LongArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongArrayMessage::CopyFrom(const LongArrayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LongArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongArrayMessage::IsInitialized() const {
  return true;
}

void LongArrayMessage::InternalSwap(LongArrayMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arr_.InternalSwap(&other->arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LongArrayMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FloatArrayMessage::_Internal {
 public:
};

FloatArrayMessage::FloatArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FloatArrayMessage)
}
FloatArrayMessage::FloatArrayMessage(const FloatArrayMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arr_(from.arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FloatArrayMessage)
}

void FloatArrayMessage::SharedCtor() {
}

FloatArrayMessage::~FloatArrayMessage() {
  // @@protoc_insertion_point(destructor:FloatArrayMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FloatArrayMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FloatArrayMessage::ArenaDtor(void* object) {
  FloatArrayMessage* _this = reinterpret_cast< FloatArrayMessage* >(object);
  (void)_this;
}
void FloatArrayMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatArrayMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatArrayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:FloatArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatArrayMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_arr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatArrayMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FloatArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float arr = 1;
  if (this->_internal_arr_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_arr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FloatArrayMessage)
  return target;
}

size_t FloatArrayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FloatArrayMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float arr = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arr_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatArrayMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FloatArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatArrayMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatArrayMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FloatArrayMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FloatArrayMessage)
    MergeFrom(*source);
  }
}

void FloatArrayMessage::MergeFrom(const FloatArrayMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FloatArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_.MergeFrom(from.arr_);
}

void FloatArrayMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FloatArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatArrayMessage::CopyFrom(const FloatArrayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FloatArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatArrayMessage::IsInitialized() const {
  return true;
}

void FloatArrayMessage::InternalSwap(FloatArrayMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arr_.InternalSwap(&other->arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatArrayMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleArrayMessage::_Internal {
 public:
};

DoubleArrayMessage::DoubleArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DoubleArrayMessage)
}
DoubleArrayMessage::DoubleArrayMessage(const DoubleArrayMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arr_(from.arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DoubleArrayMessage)
}

void DoubleArrayMessage::SharedCtor() {
}

DoubleArrayMessage::~DoubleArrayMessage() {
  // @@protoc_insertion_point(destructor:DoubleArrayMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleArrayMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleArrayMessage::ArenaDtor(void* object) {
  DoubleArrayMessage* _this = reinterpret_cast< DoubleArrayMessage* >(object);
  (void)_this;
}
void DoubleArrayMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleArrayMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoubleArrayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DoubleArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleArrayMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_arr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_arr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleArrayMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DoubleArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double arr = 1;
  if (this->_internal_arr_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_arr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DoubleArrayMessage)
  return target;
}

size_t DoubleArrayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DoubleArrayMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double arr = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arr_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleArrayMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DoubleArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleArrayMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleArrayMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DoubleArrayMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DoubleArrayMessage)
    MergeFrom(*source);
  }
}

void DoubleArrayMessage::MergeFrom(const DoubleArrayMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DoubleArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_.MergeFrom(from.arr_);
}

void DoubleArrayMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DoubleArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleArrayMessage::CopyFrom(const DoubleArrayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DoubleArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleArrayMessage::IsInitialized() const {
  return true;
}

void DoubleArrayMessage::InternalSwap(DoubleArrayMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arr_.InternalSwap(&other->arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleArrayMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommandArrayMessage::_Internal {
 public:
};

CommandArrayMessage::CommandArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  command_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommandArrayMessage)
}
CommandArrayMessage::CommandArrayMessage(const CommandArrayMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      command_arr_(from.command_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CommandArrayMessage)
}

void CommandArrayMessage::SharedCtor() {
}

CommandArrayMessage::~CommandArrayMessage() {
  // @@protoc_insertion_point(destructor:CommandArrayMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandArrayMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommandArrayMessage::ArenaDtor(void* object) {
  CommandArrayMessage* _this = reinterpret_cast< CommandArrayMessage* >(object);
  (void)_this;
}
void CommandArrayMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandArrayMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandArrayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CommandArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandArrayMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CommandMessage command_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_command_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandArrayMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommandArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CommandMessage command_arr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_command_arr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_command_arr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommandArrayMessage)
  return target;
}

size_t CommandArrayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommandArrayMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CommandMessage command_arr = 1;
  total_size += 1UL * this->_internal_command_arr_size();
  for (const auto& msg : this->command_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandArrayMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommandArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandArrayMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandArrayMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommandArrayMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommandArrayMessage)
    MergeFrom(*source);
  }
}

void CommandArrayMessage::MergeFrom(const CommandArrayMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommandArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_arr_.MergeFrom(from.command_arr_);
}

void CommandArrayMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommandArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandArrayMessage::CopyFrom(const CommandArrayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommandArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandArrayMessage::IsInitialized() const {
  return true;
}

void CommandArrayMessage::InternalSwap(CommandArrayMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  command_arr_.InternalSwap(&other->command_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandArrayMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommandMessage::_Internal {
 public:
};

CommandMessage::CommandMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommandMessage)
}
CommandMessage::CommandMessage(const CommandMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArena());
  }
  worker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_worker_name().empty()) {
    worker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worker_name(), 
      GetArena());
  }
  cmd_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cmd_type().empty()) {
    cmd_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cmd_type(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CommandMessage)
}

void CommandMessage::SharedCtor() {
addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
worker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cmd_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommandMessage::~CommandMessage() {
  // @@protoc_insertion_point(destructor:CommandMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  worker_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandMessage::ArenaDtor(void* object) {
  CommandMessage* _this = reinterpret_cast< CommandMessage* >(object);
  (void)_this;
}
void CommandMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CommandMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty();
  worker_name_.ClearToEmpty();
  cmd_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CommandMessage.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string worker_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_worker_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CommandMessage.worker_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cmd_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cmd_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CommandMessage.cmd_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommandMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CommandMessage.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // string worker_name = 2;
  if (this->worker_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_name().data(), static_cast<int>(this->_internal_worker_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CommandMessage.worker_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_worker_name(), target);
  }

  // string cmd_type = 3;
  if (this->cmd_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd_type().data(), static_cast<int>(this->_internal_cmd_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CommandMessage.cmd_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cmd_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommandMessage)
  return target;
}

size_t CommandMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommandMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // string worker_name = 2;
  if (this->worker_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_name());
  }

  // string cmd_type = 3;
  if (this->cmd_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommandMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommandMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommandMessage)
    MergeFrom(*source);
  }
}

void CommandMessage::MergeFrom(const CommandMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommandMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.worker_name().size() > 0) {
    _internal_set_worker_name(from._internal_worker_name());
  }
  if (from.cmd_type().size() > 0) {
    _internal_set_cmd_type(from._internal_cmd_type());
  }
}

void CommandMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommandMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMessage::CopyFrom(const CommandMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommandMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMessage::IsInitialized() const {
  return true;
}

void CommandMessage::InternalSwap(CommandMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  worker_name_.Swap(&other->worker_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cmd_type_.Swap(&other->cmd_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerStatusMessage::_Internal {
 public:
};

ServerStatusMessage::ServerStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  worker_status_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerStatusMessage)
}
ServerStatusMessage::ServerStatusMessage(const ServerStatusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      worker_status_arr_(from.worker_status_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ServerStatusMessage)
}

void ServerStatusMessage::SharedCtor() {
addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerStatusMessage::~ServerStatusMessage() {
  // @@protoc_insertion_point(destructor:ServerStatusMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerStatusMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerStatusMessage::ArenaDtor(void* object) {
  ServerStatusMessage* _this = reinterpret_cast< ServerStatusMessage* >(object);
  (void)_this;
}
void ServerStatusMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerStatusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerStatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerStatusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_status_arr_.Clear();
  addr_.ClearToEmpty();
  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerStatusMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerStatusMessage.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .WorkerStatusMessage worker_status_arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_worker_status_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerStatusMessage.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerStatusMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerStatusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerStatusMessage.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // repeated .WorkerStatusMessage worker_status_arr = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_worker_status_arr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_worker_status_arr(i), target, stream);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerStatusMessage.status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerStatusMessage)
  return target;
}

size_t ServerStatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerStatusMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .WorkerStatusMessage worker_status_arr = 2;
  total_size += 1UL * this->_internal_worker_status_arr_size();
  for (const auto& msg : this->worker_status_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerStatusMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerStatusMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerStatusMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerStatusMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerStatusMessage)
    MergeFrom(*source);
  }
}

void ServerStatusMessage::MergeFrom(const ServerStatusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  worker_status_arr_.MergeFrom(from.worker_status_arr_);
  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
}

void ServerStatusMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatusMessage::CopyFrom(const ServerStatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatusMessage::IsInitialized() const {
  return true;
}

void ServerStatusMessage::InternalSwap(ServerStatusMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  worker_status_arr_.InternalSwap(&other->worker_status_arr_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerStatusMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkerStatusMessage::_Internal {
 public:
};

WorkerStatusMessage::WorkerStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  futures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WorkerStatusMessage)
}
WorkerStatusMessage::WorkerStatusMessage(const WorkerStatusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      futures_(from.futures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_worker_name().empty()) {
    worker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worker_name(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:WorkerStatusMessage)
}

void WorkerStatusMessage::SharedCtor() {
worker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WorkerStatusMessage::~WorkerStatusMessage() {
  // @@protoc_insertion_point(destructor:WorkerStatusMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerStatusMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  worker_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkerStatusMessage::ArenaDtor(void* object) {
  WorkerStatusMessage* _this = reinterpret_cast< WorkerStatusMessage* >(object);
  (void)_this;
}
void WorkerStatusMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerStatusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkerStatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WorkerStatusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  futures_.Clear();
  worker_name_.ClearToEmpty();
  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerStatusMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string worker_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_worker_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WorkerStatusMessage.worker_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WorkerStatusMessage.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .WorkerFutureMessage futures = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_futures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerStatusMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorkerStatusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string worker_name = 1;
  if (this->worker_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_name().data(), static_cast<int>(this->_internal_worker_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WorkerStatusMessage.worker_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worker_name(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WorkerStatusMessage.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // repeated .WorkerFutureMessage futures = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_futures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_futures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorkerStatusMessage)
  return target;
}

size_t WorkerStatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorkerStatusMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .WorkerFutureMessage futures = 3;
  total_size += 1UL * this->_internal_futures_size();
  for (const auto& msg : this->futures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string worker_name = 1;
  if (this->worker_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_name());
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerStatusMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WorkerStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerStatusMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerStatusMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WorkerStatusMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WorkerStatusMessage)
    MergeFrom(*source);
  }
}

void WorkerStatusMessage::MergeFrom(const WorkerStatusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorkerStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  futures_.MergeFrom(from.futures_);
  if (from.worker_name().size() > 0) {
    _internal_set_worker_name(from._internal_worker_name());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
}

void WorkerStatusMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WorkerStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerStatusMessage::CopyFrom(const WorkerStatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorkerStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerStatusMessage::IsInitialized() const {
  return true;
}

void WorkerStatusMessage::InternalSwap(WorkerStatusMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  futures_.InternalSwap(&other->futures_);
  worker_name_.Swap(&other->worker_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerStatusMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkerFutureMessage::_Internal {
 public:
};

WorkerFutureMessage::WorkerFutureMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WorkerFutureMessage)
}
WorkerFutureMessage::WorkerFutureMessage(const WorkerFutureMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:WorkerFutureMessage)
}

void WorkerFutureMessage::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WorkerFutureMessage::~WorkerFutureMessage() {
  // @@protoc_insertion_point(destructor:WorkerFutureMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerFutureMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkerFutureMessage::ArenaDtor(void* object) {
  WorkerFutureMessage* _this = reinterpret_cast< WorkerFutureMessage* >(object);
  (void)_this;
}
void WorkerFutureMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerFutureMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkerFutureMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WorkerFutureMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty();
  desc_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerFutureMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WorkerFutureMessage.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WorkerFutureMessage.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerFutureMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorkerFutureMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WorkerFutureMessage.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // string desc = 2;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WorkerFutureMessage.desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorkerFutureMessage)
  return target;
}

size_t WorkerFutureMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorkerFutureMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 1;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string desc = 2;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerFutureMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WorkerFutureMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerFutureMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerFutureMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WorkerFutureMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WorkerFutureMessage)
    MergeFrom(*source);
  }
}

void WorkerFutureMessage::MergeFrom(const WorkerFutureMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorkerFutureMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.desc().size() > 0) {
    _internal_set_desc(from._internal_desc());
  }
}

void WorkerFutureMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WorkerFutureMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerFutureMessage::CopyFrom(const WorkerFutureMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorkerFutureMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerFutureMessage::IsInitialized() const {
  return true;
}

void WorkerFutureMessage::InternalSwap(WorkerFutureMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerFutureMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchRequestMessage::_Internal {
 public:
};

FetchRequestMessage::FetchRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  request_arr_(arena),
  param_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FetchRequestMessage)
}
FetchRequestMessage::FetchRequestMessage(const FetchRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      request_arr_(from.request_arr_),
      param_arr_(from.param_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FetchRequestMessage)
}

void FetchRequestMessage::SharedCtor() {
}

FetchRequestMessage::~FetchRequestMessage() {
  // @@protoc_insertion_point(destructor:FetchRequestMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchRequestMessage::ArenaDtor(void* object) {
  FetchRequestMessage* _this = reinterpret_cast< FetchRequestMessage* >(object);
  (void)_this;
}
void FetchRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:FetchRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_arr_.Clear();
  param_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string request_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_request_arr();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FetchRequestMessage.request_arr"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string param_arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_param_arr();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FetchRequestMessage.param_arr"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FetchRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string request_arr = 1;
  for (int i = 0, n = this->_internal_request_arr_size(); i < n; i++) {
    const auto& s = this->_internal_request_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FetchRequestMessage.request_arr");
    target = stream->WriteString(1, s, target);
  }

  // repeated string param_arr = 2;
  for (int i = 0, n = this->_internal_param_arr_size(); i < n; i++) {
    const auto& s = this->_internal_param_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FetchRequestMessage.param_arr");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FetchRequestMessage)
  return target;
}

size_t FetchRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FetchRequestMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string request_arr = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(request_arr_.size());
  for (int i = 0, n = request_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      request_arr_.Get(i));
  }

  // repeated string param_arr = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(param_arr_.size());
  for (int i = 0, n = param_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      param_arr_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchRequestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FetchRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchRequestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchRequestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FetchRequestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FetchRequestMessage)
    MergeFrom(*source);
  }
}

void FetchRequestMessage::MergeFrom(const FetchRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FetchRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_arr_.MergeFrom(from.request_arr_);
  param_arr_.MergeFrom(from.param_arr_);
}

void FetchRequestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FetchRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchRequestMessage::CopyFrom(const FetchRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FetchRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchRequestMessage::IsInitialized() const {
  return true;
}

void FetchRequestMessage::InternalSwap(FetchRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_arr_.InternalSwap(&other->request_arr_);
  param_arr_.InternalSwap(&other->param_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchRequestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchReplyMessage::_Internal {
 public:
  static const ::CpuMessage& cpu_message(const FetchReplyMessage* msg);
  static const ::MemUsageMessage& mem_usage_message(const FetchReplyMessage* msg);
  static const ::MemoryMonitorMessage& memory_monitor_message(const FetchReplyMessage* msg);
};

const ::CpuMessage&
FetchReplyMessage::_Internal::cpu_message(const FetchReplyMessage* msg) {
  return *msg->cpu_message_;
}
const ::MemUsageMessage&
FetchReplyMessage::_Internal::mem_usage_message(const FetchReplyMessage* msg) {
  return *msg->mem_usage_message_;
}
const ::MemoryMonitorMessage&
FetchReplyMessage::_Internal::memory_monitor_message(const FetchReplyMessage* msg) {
  return *msg->memory_monitor_message_;
}
FetchReplyMessage::FetchReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FetchReplyMessage)
}
FetchReplyMessage::FetchReplyMessage(const FetchReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArena());
  }
  if (from._internal_has_cpu_message()) {
    cpu_message_ = new ::CpuMessage(*from.cpu_message_);
  } else {
    cpu_message_ = nullptr;
  }
  if (from._internal_has_mem_usage_message()) {
    mem_usage_message_ = new ::MemUsageMessage(*from.mem_usage_message_);
  } else {
    mem_usage_message_ = nullptr;
  }
  if (from._internal_has_memory_monitor_message()) {
    memory_monitor_message_ = new ::MemoryMonitorMessage(*from.memory_monitor_message_);
  } else {
    memory_monitor_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:FetchReplyMessage)
}

void FetchReplyMessage::SharedCtor() {
addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cpu_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memory_monitor_message_) -
    reinterpret_cast<char*>(&cpu_message_)) + sizeof(memory_monitor_message_));
}

FetchReplyMessage::~FetchReplyMessage() {
  // @@protoc_insertion_point(destructor:FetchReplyMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cpu_message_;
  if (this != internal_default_instance()) delete mem_usage_message_;
  if (this != internal_default_instance()) delete memory_monitor_message_;
}

void FetchReplyMessage::ArenaDtor(void* object) {
  FetchReplyMessage* _this = reinterpret_cast< FetchReplyMessage* >(object);
  (void)_this;
}
void FetchReplyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchReplyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:FetchReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  addr_.ClearToEmpty();
  if (GetArena() == nullptr && cpu_message_ != nullptr) {
    delete cpu_message_;
  }
  cpu_message_ = nullptr;
  if (GetArena() == nullptr && mem_usage_message_ != nullptr) {
    delete mem_usage_message_;
  }
  mem_usage_message_ = nullptr;
  if (GetArena() == nullptr && memory_monitor_message_ != nullptr) {
    delete memory_monitor_message_;
  }
  memory_monitor_message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchReplyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FetchReplyMessage.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CpuMessage cpu_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MemUsageMessage mem_usage_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mem_usage_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MemoryMonitorMessage memory_monitor_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_monitor_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string infos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_infos();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FetchReplyMessage.infos"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchReplyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FetchReplyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FetchReplyMessage.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // .CpuMessage cpu_message = 2;
  if (this->has_cpu_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cpu_message(this), target, stream);
  }

  // .MemUsageMessage mem_usage_message = 3;
  if (this->has_mem_usage_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mem_usage_message(this), target, stream);
  }

  // .MemoryMonitorMessage memory_monitor_message = 4;
  if (this->has_memory_monitor_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::memory_monitor_message(this), target, stream);
  }

  // repeated string infos = 5;
  for (int i = 0, n = this->_internal_infos_size(); i < n; i++) {
    const auto& s = this->_internal_infos(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FetchReplyMessage.infos");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FetchReplyMessage)
  return target;
}

size_t FetchReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FetchReplyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string infos = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(infos_.size());
  for (int i = 0, n = infos_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      infos_.Get(i));
  }

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // .CpuMessage cpu_message = 2;
  if (this->has_cpu_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpu_message_);
  }

  // .MemUsageMessage mem_usage_message = 3;
  if (this->has_mem_usage_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mem_usage_message_);
  }

  // .MemoryMonitorMessage memory_monitor_message = 4;
  if (this->has_memory_monitor_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memory_monitor_message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchReplyMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FetchReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchReplyMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchReplyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FetchReplyMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FetchReplyMessage)
    MergeFrom(*source);
  }
}

void FetchReplyMessage::MergeFrom(const FetchReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FetchReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.has_cpu_message()) {
    _internal_mutable_cpu_message()->::CpuMessage::MergeFrom(from._internal_cpu_message());
  }
  if (from.has_mem_usage_message()) {
    _internal_mutable_mem_usage_message()->::MemUsageMessage::MergeFrom(from._internal_mem_usage_message());
  }
  if (from.has_memory_monitor_message()) {
    _internal_mutable_memory_monitor_message()->::MemoryMonitorMessage::MergeFrom(from._internal_memory_monitor_message());
  }
}

void FetchReplyMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FetchReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchReplyMessage::CopyFrom(const FetchReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FetchReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchReplyMessage::IsInitialized() const {
  return true;
}

void FetchReplyMessage::InternalSwap(FetchReplyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchReplyMessage, memory_monitor_message_)
      + sizeof(FetchReplyMessage::memory_monitor_message_)
      - PROTOBUF_FIELD_OFFSET(FetchReplyMessage, cpu_message_)>(
          reinterpret_cast<char*>(&cpu_message_),
          reinterpret_cast<char*>(&other->cpu_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchReplyMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerStatusArrayMessage::_Internal {
 public:
};

ServerStatusArrayMessage::ServerStatusArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  server_status_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerStatusArrayMessage)
}
ServerStatusArrayMessage::ServerStatusArrayMessage(const ServerStatusArrayMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      server_status_arr_(from.server_status_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerStatusArrayMessage)
}

void ServerStatusArrayMessage::SharedCtor() {
}

ServerStatusArrayMessage::~ServerStatusArrayMessage() {
  // @@protoc_insertion_point(destructor:ServerStatusArrayMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerStatusArrayMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerStatusArrayMessage::ArenaDtor(void* object) {
  ServerStatusArrayMessage* _this = reinterpret_cast< ServerStatusArrayMessage* >(object);
  (void)_this;
}
void ServerStatusArrayMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerStatusArrayMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerStatusArrayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerStatusArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_status_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerStatusArrayMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ServerStatusMessage server_status_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_server_status_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerStatusArrayMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerStatusArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerStatusMessage server_status_arr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_server_status_arr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_server_status_arr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerStatusArrayMessage)
  return target;
}

size_t ServerStatusArrayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerStatusArrayMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServerStatusMessage server_status_arr = 1;
  total_size += 1UL * this->_internal_server_status_arr_size();
  for (const auto& msg : this->server_status_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerStatusArrayMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerStatusArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerStatusArrayMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerStatusArrayMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerStatusArrayMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerStatusArrayMessage)
    MergeFrom(*source);
  }
}

void ServerStatusArrayMessage::MergeFrom(const ServerStatusArrayMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerStatusArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_status_arr_.MergeFrom(from.server_status_arr_);
}

void ServerStatusArrayMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerStatusArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatusArrayMessage::CopyFrom(const ServerStatusArrayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerStatusArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatusArrayMessage::IsInitialized() const {
  return true;
}

void ServerStatusArrayMessage::InternalSwap(ServerStatusArrayMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  server_status_arr_.InternalSwap(&other->server_status_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerStatusArrayMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FetchReplyArrayMessage::_Internal {
 public:
};

FetchReplyArrayMessage::FetchReplyArrayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fetch_reply_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FetchReplyArrayMessage)
}
FetchReplyArrayMessage::FetchReplyArrayMessage(const FetchReplyArrayMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fetch_reply_arr_(from.fetch_reply_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FetchReplyArrayMessage)
}

void FetchReplyArrayMessage::SharedCtor() {
}

FetchReplyArrayMessage::~FetchReplyArrayMessage() {
  // @@protoc_insertion_point(destructor:FetchReplyArrayMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchReplyArrayMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchReplyArrayMessage::ArenaDtor(void* object) {
  FetchReplyArrayMessage* _this = reinterpret_cast< FetchReplyArrayMessage* >(object);
  (void)_this;
}
void FetchReplyArrayMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchReplyArrayMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FetchReplyArrayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:FetchReplyArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fetch_reply_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchReplyArrayMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .FetchReplyMessage fetch_reply_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fetch_reply_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchReplyArrayMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FetchReplyArrayMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FetchReplyMessage fetch_reply_arr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fetch_reply_arr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fetch_reply_arr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FetchReplyArrayMessage)
  return target;
}

size_t FetchReplyArrayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FetchReplyArrayMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FetchReplyMessage fetch_reply_arr = 1;
  total_size += 1UL * this->_internal_fetch_reply_arr_size();
  for (const auto& msg : this->fetch_reply_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchReplyArrayMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FetchReplyArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchReplyArrayMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchReplyArrayMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FetchReplyArrayMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FetchReplyArrayMessage)
    MergeFrom(*source);
  }
}

void FetchReplyArrayMessage::MergeFrom(const FetchReplyArrayMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FetchReplyArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fetch_reply_arr_.MergeFrom(from.fetch_reply_arr_);
}

void FetchReplyArrayMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FetchReplyArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchReplyArrayMessage::CopyFrom(const FetchReplyArrayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FetchReplyArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchReplyArrayMessage::IsInitialized() const {
  return true;
}

void FetchReplyArrayMessage::InternalSwap(FetchReplyArrayMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fetch_reply_arr_.InternalSwap(&other->fetch_reply_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchReplyArrayMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CpuMessage::_Internal {
 public:
};

CpuMessage::CpuMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  usage_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CpuMessage)
}
CpuMessage::CpuMessage(const CpuMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      usage_arr_(from.usage_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  core_num_ = from.core_num_;
  // @@protoc_insertion_point(copy_constructor:CpuMessage)
}

void CpuMessage::SharedCtor() {
core_num_ = 0;
}

CpuMessage::~CpuMessage() {
  // @@protoc_insertion_point(destructor:CpuMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CpuMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CpuMessage::ArenaDtor(void* object) {
  CpuMessage* _this = reinterpret_cast< CpuMessage* >(object);
  (void)_this;
}
void CpuMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpuMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CpuMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CpuMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usage_arr_.Clear();
  core_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 core_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          core_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float usage_arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_usage_arr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_usage_arr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CpuMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 core_num = 1;
  if (this->core_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_core_num(), target);
  }

  // repeated float usage_arr = 2;
  if (this->_internal_usage_arr_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_usage_arr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CpuMessage)
  return target;
}

size_t CpuMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CpuMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float usage_arr = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_usage_arr_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _usage_arr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 core_num = 1;
  if (this->core_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_core_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CpuMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CpuMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpuMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CpuMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CpuMessage)
    MergeFrom(*source);
  }
}

void CpuMessage::MergeFrom(const CpuMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CpuMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usage_arr_.MergeFrom(from.usage_arr_);
  if (from.core_num() != 0) {
    _internal_set_core_num(from._internal_core_num());
  }
}

void CpuMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CpuMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpuMessage::CopyFrom(const CpuMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CpuMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuMessage::IsInitialized() const {
  return true;
}

void CpuMessage::InternalSwap(CpuMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  usage_arr_.InternalSwap(&other->usage_arr_);
  swap(core_num_, other->core_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemUsageMessage::_Internal {
 public:
};

MemUsageMessage::MemUsageMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MemUsageMessage)
}
MemUsageMessage::MemUsageMessage(const MemUsageMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&wired_) -
    reinterpret_cast<char*>(&total_)) + sizeof(wired_));
  // @@protoc_insertion_point(copy_constructor:MemUsageMessage)
}

void MemUsageMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wired_) -
    reinterpret_cast<char*>(&total_)) + sizeof(wired_));
}

MemUsageMessage::~MemUsageMessage() {
  // @@protoc_insertion_point(destructor:MemUsageMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemUsageMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MemUsageMessage::ArenaDtor(void* object) {
  MemUsageMessage* _this = reinterpret_cast< MemUsageMessage* >(object);
  (void)_this;
}
void MemUsageMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemUsageMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemUsageMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MemUsageMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wired_) -
      reinterpret_cast<char*>(&total_)) + sizeof(wired_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemUsageMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 used = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 free = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 inactive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          inactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 buffers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          buffers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cached = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 wired = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          wired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemUsageMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MemUsageMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total = 1;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_total(), target);
  }

  // int64 available = 2;
  if (this->available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_available(), target);
  }

  // int64 used = 3;
  if (this->used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_used(), target);
  }

  // int64 free = 4;
  if (this->free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_free(), target);
  }

  // int64 active = 5;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_active(), target);
  }

  // int64 inactive = 6;
  if (this->inactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_inactive(), target);
  }

  // int64 buffers = 7;
  if (this->buffers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_buffers(), target);
  }

  // int64 cached = 8;
  if (this->cached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_cached(), target);
  }

  // int64 wired = 9;
  if (this->wired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_wired(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemUsageMessage)
  return target;
}

size_t MemUsageMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MemUsageMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 total = 1;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total());
  }

  // int64 available = 2;
  if (this->available() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_available());
  }

  // int64 used = 3;
  if (this->used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_used());
  }

  // int64 free = 4;
  if (this->free() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_free());
  }

  // int64 active = 5;
  if (this->active() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_active());
  }

  // int64 inactive = 6;
  if (this->inactive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_inactive());
  }

  // int64 buffers = 7;
  if (this->buffers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buffers());
  }

  // int64 cached = 8;
  if (this->cached() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cached());
  }

  // int64 wired = 9;
  if (this->wired() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_wired());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemUsageMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MemUsageMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MemUsageMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemUsageMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MemUsageMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MemUsageMessage)
    MergeFrom(*source);
  }
}

void MemUsageMessage::MergeFrom(const MemUsageMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MemUsageMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.available() != 0) {
    _internal_set_available(from._internal_available());
  }
  if (from.used() != 0) {
    _internal_set_used(from._internal_used());
  }
  if (from.free() != 0) {
    _internal_set_free(from._internal_free());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.inactive() != 0) {
    _internal_set_inactive(from._internal_inactive());
  }
  if (from.buffers() != 0) {
    _internal_set_buffers(from._internal_buffers());
  }
  if (from.cached() != 0) {
    _internal_set_cached(from._internal_cached());
  }
  if (from.wired() != 0) {
    _internal_set_wired(from._internal_wired());
  }
}

void MemUsageMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MemUsageMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemUsageMessage::CopyFrom(const MemUsageMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MemUsageMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemUsageMessage::IsInitialized() const {
  return true;
}

void MemUsageMessage::InternalSwap(MemUsageMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemUsageMessage, wired_)
      + sizeof(MemUsageMessage::wired_)
      - PROTOBUF_FIELD_OFFSET(MemUsageMessage, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemUsageMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemoryMonitorMessage::_Internal {
 public:
};

MemoryMonitorMessage::MemoryMonitorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  process_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MemoryMonitorMessage)
}
MemoryMonitorMessage::MemoryMonitorMessage(const MemoryMonitorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      process_arr_(from.process_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MemoryMonitorMessage)
}

void MemoryMonitorMessage::SharedCtor() {
}

MemoryMonitorMessage::~MemoryMonitorMessage() {
  // @@protoc_insertion_point(destructor:MemoryMonitorMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoryMonitorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MemoryMonitorMessage::ArenaDtor(void* object) {
  MemoryMonitorMessage* _this = reinterpret_cast< MemoryMonitorMessage* >(object);
  (void)_this;
}
void MemoryMonitorMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryMonitorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoryMonitorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MemoryMonitorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryMonitorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ProcessMessage process_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_process_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryMonitorMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MemoryMonitorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProcessMessage process_arr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_process_arr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_process_arr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemoryMonitorMessage)
  return target;
}

size_t MemoryMonitorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MemoryMonitorMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProcessMessage process_arr = 1;
  total_size += 1UL * this->_internal_process_arr_size();
  for (const auto& msg : this->process_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryMonitorMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MemoryMonitorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryMonitorMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryMonitorMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MemoryMonitorMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MemoryMonitorMessage)
    MergeFrom(*source);
  }
}

void MemoryMonitorMessage::MergeFrom(const MemoryMonitorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MemoryMonitorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  process_arr_.MergeFrom(from.process_arr_);
}

void MemoryMonitorMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MemoryMonitorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryMonitorMessage::CopyFrom(const MemoryMonitorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MemoryMonitorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryMonitorMessage::IsInitialized() const {
  return true;
}

void MemoryMonitorMessage::InternalSwap(MemoryMonitorMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  process_arr_.InternalSwap(&other->process_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryMonitorMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProcessMessage::_Internal {
 public:
};

ProcessMessage::ProcessMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  threads_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProcessMessage)
}
ProcessMessage::ProcessMessage(const ProcessMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      threads_(from.threads_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  cmdline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cmdline().empty()) {
    cmdline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cmdline(), 
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(gid_));
  // @@protoc_insertion_point(copy_constructor:ProcessMessage)
}

void ProcessMessage::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cmdline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(gid_));
}

ProcessMessage::~ProcessMessage() {
  // @@protoc_insertion_point(destructor:ProcessMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmdline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessMessage::ArenaDtor(void* object) {
  ProcessMessage* _this = reinterpret_cast< ProcessMessage* >(object);
  (void)_this;
}
void ProcessMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threads_.Clear();
  name_.ClearToEmpty();
  cmdline_.ClearToEmpty();
  username_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(gid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ppid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ppid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessMessage.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cmdline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cmdline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessMessage.cmdline"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double create_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcessMessage.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ThreadMessage threads = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pid = 1;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pid(), target);
  }

  // uint32 ppid = 2;
  if (this->ppid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ppid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessMessage.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string cmdline = 4;
  if (this->cmdline().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmdline().data(), static_cast<int>(this->_internal_cmdline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessMessage.cmdline");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cmdline(), target);
  }

  // double create_time = 5;
  if (!(this->create_time() <= 0 && this->create_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_create_time(), target);
  }

  // uint32 uid = 6;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uid(), target);
  }

  // uint32 gid = 7;
  if (this->gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_gid(), target);
  }

  // string username = 8;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessMessage.username");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_username(), target);
  }

  // repeated .ThreadMessage threads = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_threads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_threads(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessMessage)
  return target;
}

size_t ProcessMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ThreadMessage threads = 9;
  total_size += 1UL * this->_internal_threads_size();
  for (const auto& msg : this->threads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string cmdline = 4;
  if (this->cmdline().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmdline());
  }

  // string username = 8;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // uint32 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pid());
  }

  // uint32 ppid = 2;
  if (this->ppid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ppid());
  }

  // double create_time = 5;
  if (!(this->create_time() <= 0 && this->create_time() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uid = 6;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 gid = 7;
  if (this->gid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProcessMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProcessMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProcessMessage)
    MergeFrom(*source);
  }
}

void ProcessMessage::MergeFrom(const ProcessMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcessMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threads_.MergeFrom(from.threads_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.cmdline().size() > 0) {
    _internal_set_cmdline(from._internal_cmdline());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.ppid() != 0) {
    _internal_set_ppid(from._internal_ppid());
  }
  if (!(from.create_time() <= 0 && from.create_time() >= 0)) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.gid() != 0) {
    _internal_set_gid(from._internal_gid());
  }
}

void ProcessMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProcessMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessMessage::CopyFrom(const ProcessMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessMessage::IsInitialized() const {
  return true;
}

void ProcessMessage::InternalSwap(ProcessMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  threads_.InternalSwap(&other->threads_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cmdline_.Swap(&other->cmdline_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessMessage, gid_)
      + sizeof(ProcessMessage::gid_)
      - PROTOBUF_FIELD_OFFSET(ProcessMessage, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ThreadMessage::_Internal {
 public:
};

ThreadMessage::ThreadMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ThreadMessage)
}
ThreadMessage::ThreadMessage(const ThreadMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tid_, &from.tid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dirty_) -
    reinterpret_cast<char*>(&tid_)) + sizeof(dirty_));
  // @@protoc_insertion_point(copy_constructor:ThreadMessage)
}

void ThreadMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dirty_) -
    reinterpret_cast<char*>(&tid_)) + sizeof(dirty_));
}

ThreadMessage::~ThreadMessage() {
  // @@protoc_insertion_point(destructor:ThreadMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThreadMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThreadMessage::ArenaDtor(void* object) {
  ThreadMessage* _this = reinterpret_cast< ThreadMessage* >(object);
  (void)_this;
}
void ThreadMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThreadMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThreadMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ThreadMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dirty_) -
      reinterpret_cast<char*>(&tid_)) + sizeof(dirty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThreadMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 tid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rss = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 vms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 shared = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lib = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lib_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 dirty = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          dirty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThreadMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ThreadMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 tid = 1;
  if (this->tid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_tid(), target);
  }

  // int64 rss = 2;
  if (this->rss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_rss(), target);
  }

  // int64 vms = 3;
  if (this->vms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_vms(), target);
  }

  // int64 shared = 4;
  if (this->shared() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_shared(), target);
  }

  // int64 text = 5;
  if (this->text() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_text(), target);
  }

  // int64 lib = 6;
  if (this->lib() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_lib(), target);
  }

  // int64 data = 7;
  if (this->data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_data(), target);
  }

  // int64 dirty = 8;
  if (this->dirty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_dirty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ThreadMessage)
  return target;
}

size_t ThreadMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ThreadMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 tid = 1;
  if (this->tid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tid());
  }

  // int64 rss = 2;
  if (this->rss() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rss());
  }

  // int64 vms = 3;
  if (this->vms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_vms());
  }

  // int64 shared = 4;
  if (this->shared() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shared());
  }

  // int64 text = 5;
  if (this->text() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_text());
  }

  // int64 lib = 6;
  if (this->lib() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lib());
  }

  // int64 data = 7;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_data());
  }

  // int64 dirty = 8;
  if (this->dirty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_dirty());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThreadMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ThreadMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ThreadMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThreadMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ThreadMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ThreadMessage)
    MergeFrom(*source);
  }
}

void ThreadMessage::MergeFrom(const ThreadMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ThreadMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tid() != 0) {
    _internal_set_tid(from._internal_tid());
  }
  if (from.rss() != 0) {
    _internal_set_rss(from._internal_rss());
  }
  if (from.vms() != 0) {
    _internal_set_vms(from._internal_vms());
  }
  if (from.shared() != 0) {
    _internal_set_shared(from._internal_shared());
  }
  if (from.text() != 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.lib() != 0) {
    _internal_set_lib(from._internal_lib());
  }
  if (from.data() != 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.dirty() != 0) {
    _internal_set_dirty(from._internal_dirty());
  }
}

void ThreadMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ThreadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadMessage::CopyFrom(const ThreadMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ThreadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadMessage::IsInitialized() const {
  return true;
}

void ThreadMessage::InternalSwap(ThreadMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThreadMessage, dirty_)
      + sizeof(ThreadMessage::dirty_)
      - PROTOBUF_FIELD_OFFSET(ThreadMessage, tid_)>(
          reinterpret_cast<char*>(&tid_),
          reinterpret_cast<char*>(&other->tid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThreadMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::StringMessage* Arena::CreateMaybeMessage< ::StringMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StringMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::IntegerMessage* Arena::CreateMaybeMessage< ::IntegerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntegerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::LongMessage* Arena::CreateMaybeMessage< ::LongMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LongMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::FloatMessage* Arena::CreateMaybeMessage< ::FloatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FloatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DoubleMessage* Arena::CreateMaybeMessage< ::DoubleMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DoubleMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StringArrayMessage* Arena::CreateMaybeMessage< ::StringArrayMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StringArrayMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::IntegerArrayMessage* Arena::CreateMaybeMessage< ::IntegerArrayMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntegerArrayMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::LongArrayMessage* Arena::CreateMaybeMessage< ::LongArrayMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LongArrayMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::FloatArrayMessage* Arena::CreateMaybeMessage< ::FloatArrayMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FloatArrayMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DoubleArrayMessage* Arena::CreateMaybeMessage< ::DoubleArrayMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DoubleArrayMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CommandArrayMessage* Arena::CreateMaybeMessage< ::CommandArrayMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommandArrayMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CommandMessage* Arena::CreateMaybeMessage< ::CommandMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommandMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerStatusMessage* Arena::CreateMaybeMessage< ::ServerStatusMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerStatusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::WorkerStatusMessage* Arena::CreateMaybeMessage< ::WorkerStatusMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WorkerStatusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::WorkerFutureMessage* Arena::CreateMaybeMessage< ::WorkerFutureMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WorkerFutureMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::FetchRequestMessage* Arena::CreateMaybeMessage< ::FetchRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FetchRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::FetchReplyMessage* Arena::CreateMaybeMessage< ::FetchReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FetchReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerStatusArrayMessage* Arena::CreateMaybeMessage< ::ServerStatusArrayMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerStatusArrayMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::FetchReplyArrayMessage* Arena::CreateMaybeMessage< ::FetchReplyArrayMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FetchReplyArrayMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CpuMessage* Arena::CreateMaybeMessage< ::CpuMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CpuMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MemUsageMessage* Arena::CreateMaybeMessage< ::MemUsageMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MemUsageMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MemoryMonitorMessage* Arena::CreateMaybeMessage< ::MemoryMonitorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MemoryMonitorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessMessage* Arena::CreateMaybeMessage< ::ProcessMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcessMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ThreadMessage* Arena::CreateMaybeMessage< ::ThreadMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ThreadMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
