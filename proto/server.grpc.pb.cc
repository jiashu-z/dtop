// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto

#include "server.pb.h"
#include "server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* GRPCService_method_names[] = {
  "/GRPCService/GetIP",
  "/GRPCService/GetPort",
  "/GRPCService/GetAddr",
  "/GRPCService/ExecCommand",
  "/GRPCService/GetServerMetric",
  "/GRPCService/GetServerStatus",
};

std::unique_ptr< GRPCService::Stub> GRPCService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GRPCService::Stub> stub(new GRPCService::Stub(channel));
  return stub;
}

GRPCService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetIP_(GRPCService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPort_(GRPCService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAddr_(GRPCService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecCommand_(GRPCService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerMetric_(GRPCService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerStatus_(GRPCService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GRPCService::Stub::GetIP(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::StringMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::StringMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIP_, context, request, response);
}

void GRPCService::Stub::experimental_async::GetIP(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StringMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::StringMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIP_, context, request, response, std::move(f));
}

void GRPCService::Stub::experimental_async::GetIP(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StringMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIP_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StringMessage>* GRPCService::Stub::PrepareAsyncGetIPRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StringMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIP_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StringMessage>* GRPCService::Stub::AsyncGetIPRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIPRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCService::Stub::GetPort(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntegerMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::IntegerMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPort_, context, request, response);
}

void GRPCService::Stub::experimental_async::GetPort(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntegerMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::IntegerMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPort_, context, request, response, std::move(f));
}

void GRPCService::Stub::experimental_async::GetPort(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntegerMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntegerMessage>* GRPCService::Stub::PrepareAsyncGetPortRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntegerMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntegerMessage>* GRPCService::Stub::AsyncGetPortRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCService::Stub::GetAddr(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::StringMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::StringMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAddr_, context, request, response);
}

void GRPCService::Stub::experimental_async::GetAddr(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StringMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::StringMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAddr_, context, request, response, std::move(f));
}

void GRPCService::Stub::experimental_async::GetAddr(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StringMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAddr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StringMessage>* GRPCService::Stub::PrepareAsyncGetAddrRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StringMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAddr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StringMessage>* GRPCService::Stub::AsyncGetAddrRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAddrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCService::Stub::ExecCommand(::grpc::ClientContext* context, const ::CommandArrayMessage& request, ::StringArrayMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CommandArrayMessage, ::StringArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecCommand_, context, request, response);
}

void GRPCService::Stub::experimental_async::ExecCommand(::grpc::ClientContext* context, const ::CommandArrayMessage* request, ::StringArrayMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CommandArrayMessage, ::StringArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecCommand_, context, request, response, std::move(f));
}

void GRPCService::Stub::experimental_async::ExecCommand(::grpc::ClientContext* context, const ::CommandArrayMessage* request, ::StringArrayMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StringArrayMessage>* GRPCService::Stub::PrepareAsyncExecCommandRaw(::grpc::ClientContext* context, const ::CommandArrayMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StringArrayMessage, ::CommandArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StringArrayMessage>* GRPCService::Stub::AsyncExecCommandRaw(::grpc::ClientContext* context, const ::CommandArrayMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCService::Stub::GetServerMetric(::grpc::ClientContext* context, const ::FetchRequestMessage& request, ::FetchReplyMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FetchRequestMessage, ::FetchReplyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServerMetric_, context, request, response);
}

void GRPCService::Stub::experimental_async::GetServerMetric(::grpc::ClientContext* context, const ::FetchRequestMessage* request, ::FetchReplyMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FetchRequestMessage, ::FetchReplyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerMetric_, context, request, response, std::move(f));
}

void GRPCService::Stub::experimental_async::GetServerMetric(::grpc::ClientContext* context, const ::FetchRequestMessage* request, ::FetchReplyMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerMetric_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FetchReplyMessage>* GRPCService::Stub::PrepareAsyncGetServerMetricRaw(::grpc::ClientContext* context, const ::FetchRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FetchReplyMessage, ::FetchRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServerMetric_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FetchReplyMessage>* GRPCService::Stub::AsyncGetServerMetricRaw(::grpc::ClientContext* context, const ::FetchRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerMetricRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GRPCService::Stub::GetServerStatus(::grpc::ClientContext* context, const ::StringArrayMessage& request, ::ServerStatusMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StringArrayMessage, ::ServerStatusMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServerStatus_, context, request, response);
}

void GRPCService::Stub::experimental_async::GetServerStatus(::grpc::ClientContext* context, const ::StringArrayMessage* request, ::ServerStatusMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StringArrayMessage, ::ServerStatusMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerStatus_, context, request, response, std::move(f));
}

void GRPCService::Stub::experimental_async::GetServerStatus(::grpc::ClientContext* context, const ::StringArrayMessage* request, ::ServerStatusMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerStatusMessage>* GRPCService::Stub::PrepareAsyncGetServerStatusRaw(::grpc::ClientContext* context, const ::StringArrayMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerStatusMessage, ::StringArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServerStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerStatusMessage>* GRPCService::Stub::AsyncGetServerStatusRaw(::grpc::ClientContext* context, const ::StringArrayMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

GRPCService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCService::Service, ::google::protobuf::Empty, ::StringMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::StringMessage* resp) {
               return service->GetIP(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCService::Service, ::google::protobuf::Empty, ::IntegerMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::IntegerMessage* resp) {
               return service->GetPort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCService::Service, ::google::protobuf::Empty, ::StringMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::StringMessage* resp) {
               return service->GetAddr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCService::Service, ::CommandArrayMessage, ::StringArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CommandArrayMessage* req,
             ::StringArrayMessage* resp) {
               return service->ExecCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCService::Service, ::FetchRequestMessage, ::FetchReplyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FetchRequestMessage* req,
             ::FetchReplyMessage* resp) {
               return service->GetServerMetric(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCService::Service, ::StringArrayMessage, ::ServerStatusMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GRPCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StringArrayMessage* req,
             ::ServerStatusMessage* resp) {
               return service->GetServerStatus(ctx, req, resp);
             }, this)));
}

GRPCService::Service::~Service() {
}

::grpc::Status GRPCService::Service::GetIP(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::StringMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCService::Service::GetPort(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::IntegerMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCService::Service::GetAddr(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::StringMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCService::Service::ExecCommand(::grpc::ServerContext* context, const ::CommandArrayMessage* request, ::StringArrayMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCService::Service::GetServerMetric(::grpc::ServerContext* context, const ::FetchRequestMessage* request, ::FetchReplyMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCService::Service::GetServerStatus(::grpc::ServerContext* context, const ::StringArrayMessage* request, ::ServerStatusMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


