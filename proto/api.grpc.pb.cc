// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api.proto

#include "api.pb.h"
#include "api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* APIService_method_names[] = {
  "/APIService/GetClusterStatus",
  "/APIService/GetServerAddresses",
  "/APIService/ExecClusterCommand",
  "/APIService/GetClusterMetric",
  "/APIService/GetAggregatedVirtualMemInfo",
};

std::unique_ptr< APIService::Stub> APIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< APIService::Stub> stub(new APIService::Stub(channel));
  return stub;
}

APIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetClusterStatus_(APIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerAddresses_(APIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecClusterCommand_(APIService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClusterMetric_(APIService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAggregatedVirtualMemInfo_(APIService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status APIService::Stub::GetClusterStatus(::grpc::ClientContext* context, const ::StringArrayMessage& request, ::ServerStatusArrayMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StringArrayMessage, ::ServerStatusArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetClusterStatus_, context, request, response);
}

void APIService::Stub::experimental_async::GetClusterStatus(::grpc::ClientContext* context, const ::StringArrayMessage* request, ::ServerStatusArrayMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StringArrayMessage, ::ServerStatusArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClusterStatus_, context, request, response, std::move(f));
}

void APIService::Stub::experimental_async::GetClusterStatus(::grpc::ClientContext* context, const ::StringArrayMessage* request, ::ServerStatusArrayMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClusterStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ServerStatusArrayMessage>* APIService::Stub::PrepareAsyncGetClusterStatusRaw(::grpc::ClientContext* context, const ::StringArrayMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ServerStatusArrayMessage, ::StringArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetClusterStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ServerStatusArrayMessage>* APIService::Stub::AsyncGetClusterStatusRaw(::grpc::ClientContext* context, const ::StringArrayMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetClusterStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status APIService::Stub::GetServerAddresses(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::StringArrayMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::StringArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServerAddresses_, context, request, response);
}

void APIService::Stub::experimental_async::GetServerAddresses(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StringArrayMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::StringArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerAddresses_, context, request, response, std::move(f));
}

void APIService::Stub::experimental_async::GetServerAddresses(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::StringArrayMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerAddresses_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StringArrayMessage>* APIService::Stub::PrepareAsyncGetServerAddressesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StringArrayMessage, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServerAddresses_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StringArrayMessage>* APIService::Stub::AsyncGetServerAddressesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerAddressesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status APIService::Stub::ExecClusterCommand(::grpc::ClientContext* context, const ::CommandArrayMessage& request, ::StringArrayMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CommandArrayMessage, ::StringArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecClusterCommand_, context, request, response);
}

void APIService::Stub::experimental_async::ExecClusterCommand(::grpc::ClientContext* context, const ::CommandArrayMessage* request, ::StringArrayMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CommandArrayMessage, ::StringArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecClusterCommand_, context, request, response, std::move(f));
}

void APIService::Stub::experimental_async::ExecClusterCommand(::grpc::ClientContext* context, const ::CommandArrayMessage* request, ::StringArrayMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecClusterCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StringArrayMessage>* APIService::Stub::PrepareAsyncExecClusterCommandRaw(::grpc::ClientContext* context, const ::CommandArrayMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StringArrayMessage, ::CommandArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecClusterCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StringArrayMessage>* APIService::Stub::AsyncExecClusterCommandRaw(::grpc::ClientContext* context, const ::CommandArrayMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecClusterCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status APIService::Stub::GetClusterMetric(::grpc::ClientContext* context, const ::FetchRequestArrayMessage& request, ::FetchReplyArrayMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FetchRequestArrayMessage, ::FetchReplyArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetClusterMetric_, context, request, response);
}

void APIService::Stub::experimental_async::GetClusterMetric(::grpc::ClientContext* context, const ::FetchRequestArrayMessage* request, ::FetchReplyArrayMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FetchRequestArrayMessage, ::FetchReplyArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClusterMetric_, context, request, response, std::move(f));
}

void APIService::Stub::experimental_async::GetClusterMetric(::grpc::ClientContext* context, const ::FetchRequestArrayMessage* request, ::FetchReplyArrayMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClusterMetric_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FetchReplyArrayMessage>* APIService::Stub::PrepareAsyncGetClusterMetricRaw(::grpc::ClientContext* context, const ::FetchRequestArrayMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FetchReplyArrayMessage, ::FetchRequestArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetClusterMetric_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FetchReplyArrayMessage>* APIService::Stub::AsyncGetClusterMetricRaw(::grpc::ClientContext* context, const ::FetchRequestArrayMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetClusterMetricRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status APIService::Stub::GetAggregatedVirtualMemInfo(::grpc::ClientContext* context, const ::FetchRequestArrayMessage& request, ::FetchReplyArrayMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FetchRequestArrayMessage, ::FetchReplyArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAggregatedVirtualMemInfo_, context, request, response);
}

void APIService::Stub::experimental_async::GetAggregatedVirtualMemInfo(::grpc::ClientContext* context, const ::FetchRequestArrayMessage* request, ::FetchReplyArrayMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FetchRequestArrayMessage, ::FetchReplyArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAggregatedVirtualMemInfo_, context, request, response, std::move(f));
}

void APIService::Stub::experimental_async::GetAggregatedVirtualMemInfo(::grpc::ClientContext* context, const ::FetchRequestArrayMessage* request, ::FetchReplyArrayMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAggregatedVirtualMemInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FetchReplyArrayMessage>* APIService::Stub::PrepareAsyncGetAggregatedVirtualMemInfoRaw(::grpc::ClientContext* context, const ::FetchRequestArrayMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FetchReplyArrayMessage, ::FetchRequestArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAggregatedVirtualMemInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FetchReplyArrayMessage>* APIService::Stub::AsyncGetAggregatedVirtualMemInfoRaw(::grpc::ClientContext* context, const ::FetchRequestArrayMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAggregatedVirtualMemInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

APIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      APIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< APIService::Service, ::StringArrayMessage, ::ServerStatusArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](APIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StringArrayMessage* req,
             ::ServerStatusArrayMessage* resp) {
               return service->GetClusterStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      APIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< APIService::Service, ::google::protobuf::Empty, ::StringArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](APIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::StringArrayMessage* resp) {
               return service->GetServerAddresses(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      APIService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< APIService::Service, ::CommandArrayMessage, ::StringArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](APIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CommandArrayMessage* req,
             ::StringArrayMessage* resp) {
               return service->ExecClusterCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      APIService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< APIService::Service, ::FetchRequestArrayMessage, ::FetchReplyArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](APIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FetchRequestArrayMessage* req,
             ::FetchReplyArrayMessage* resp) {
               return service->GetClusterMetric(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      APIService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< APIService::Service, ::FetchRequestArrayMessage, ::FetchReplyArrayMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](APIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FetchRequestArrayMessage* req,
             ::FetchReplyArrayMessage* resp) {
               return service->GetAggregatedVirtualMemInfo(ctx, req, resp);
             }, this)));
}

APIService::Service::~Service() {
}

::grpc::Status APIService::Service::GetClusterStatus(::grpc::ServerContext* context, const ::StringArrayMessage* request, ::ServerStatusArrayMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status APIService::Service::GetServerAddresses(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::StringArrayMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status APIService::Service::ExecClusterCommand(::grpc::ServerContext* context, const ::CommandArrayMessage* request, ::StringArrayMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status APIService::Service::GetClusterMetric(::grpc::ServerContext* context, const ::FetchRequestArrayMessage* request, ::FetchReplyArrayMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status APIService::Service::GetAggregatedVirtualMemInfo(::grpc::ServerContext* context, const ::FetchRequestArrayMessage* request, ::FetchReplyArrayMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


